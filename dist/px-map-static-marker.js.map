{"version":3,"sources":["px-map-static-marker.es6.js"],"names":["PxMapStaticMarker","marker","_createMarker","parentInstance","_captureMarkerEvents","layerInstance","geometry","lat","lon","icon","_createStaticMarkerIcon","L","options","typeModifier","type","length","className","html","popupAnchor","point","iconSize","iconAnchor","divIcon","on","evt","fire","window","PxMapBehavior","DistributeProperties","Layer","Number","notify","String","reflectToAttribute","value","Object","observer","Polymer"],"mappings":"wpBAAA,CAAC,UAAU,CACT,aADS,GAGHA,kBAHG,kKA2EQ,CACb,GAAMC,QAAS,KAAKC,aAAL,EAAf,CACA,MAAOD,OACR,CA9EM,mDAgFQ,CACb,GAAI,KAAKE,cAAT,CAAyB,CACvB,KAAKC,oBAAL,CAA0B,KAAKC,aAA/B,EACA,MAAO,MAAKF,cACb,CACF,CArFM,qDA2FS,CACd,GAAMG,UAAW,CAAC,KAAKC,GAAN,CAAW,KAAKC,GAAhB,CAAjB,CACA,GAAMC,MAAO,KAAKC,uBAAL,EAAb,CACA,GAAMT,QAASU,EAAEV,MAAF,CAASK,QAAT,CAAmB,CAAEG,KAAMA,IAAR,CAAnB,CAAf,CACA,MAAOR,OACR,CAhGM,yEAqGmB,CACxB,GAAMW,SAAU,EAAhB,CAIA,GAAIC,cAAgB,KAAKC,IAAL,EAAa,KAAKA,IAAL,CAAUC,MAAxB,qBAAsD,KAAKD,IAA3D,CAAoE,EAAvF,CACAF,QAAQI,SAAR,oBAAuCH,YAAvC,CAGAD,QAAQK,IAAR,2MAMAL,QAAQM,WAAR,CAAsBP,EAAEQ,KAAF,CAAQ,CAAR,CAAU,CAAC,EAAX,CAAtB,CACAP,QAAQQ,QAAR,CAAmBT,EAAEQ,KAAF,CAAQ,EAAR,CAAY,EAAZ,CAAnB,CACAP,QAAQS,UAAR,CAAqBV,EAAEQ,KAAF,CAAQ,IAAR,CAAc,IAAd,CAArB,CAEA,MAAOR,GAAEW,OAAF,CAAUV,OAAV,CACR,CAzHM,kEAiIcX,MAjId,CAiIsB,gBAC3BA,OAAOsB,EAAP,CAAU,KAAV,CAAiB,SAACC,GAAD,CAAS,CACxB,MAAKC,IAAL,kBAA2BD,IAAIV,IAA/B,CAAuCU,GAAvC,CACD,CAFD,CAEG,IAFH,CAGD,CArIM,8BAKE,CAAE,MAAO,sBAAyB,CALpC,qCAQS,CACd,MAAO,CACLE,OAAOC,aAAP,CAAqBC,oBADhB,CAELF,OAAOC,aAAP,CAAqBE,KAFhB,CAIR,CAbM,yCAgBa,CAAE,MAAO,CAAC,iCAAD,CAAsC,CAhB5D,sCAmBU,CACf,MAAO,CAQLtB,IAAK,CACHO,KAAMgB,MADH,CAEHC,OAAQ,IAFL,CARA,CAoBLvB,IAAK,CACHM,KAAMgB,MADH,CAEHC,OAAQ,IAFL,CApBA,CAgCLjB,KAAM,CACJA,KAAMkB,MADF,CAEJC,mBAAoB,IAFhB,CAGJC,MAAO,MAHH,CAhCD,CA+CL/B,eAAgB,CACdW,KAAMqB,MADQ,CAEdJ,OAAQ,IAFM,CAGdK,SAAU,qBAHI,CA/CX,CAqDR,CAzEM,gCA0ITC,QAAQrC,iBAAR,CACD,CA3ID","file":"px-map-static-marker.js","sourcesContent":["(function(){\n  'use strict';\n\n  class PxMapStaticMarker {\n    /* Name for the component */\n    get is() { return 'px-map-static-marker'; }\n\n    /* Behaviors to import for this component */\n    get behaviors() {\n      return [\n        window.PxMapBehavior.DistributeProperties,\n        window.PxMapBehavior.Layer\n      ];\n    }\n\n    /* Properties to attach to distributed light DOM children */\n    get distributions() { return ['layerInstance as parentInstance']; }\n\n    /* Properties for this component */\n    get properties() {\n      return {\n        /**\n         * The latitude of the marker. Set a value to draw the maker at a default\n         * latitude. Listen for updates if the marker is draggable or\n         * created dynamically by the user.\n         *\n         * @type {Number}\n         */\n        lat: {\n          type: Number,\n          notify: true\n        },\n\n        /**\n        * The longitude of the marker. Set a value to draw the maker at a default\n        * longitude. Listen for updates if the marker is draggable or\n        * created dynamically by the user.\n         *\n         * @type {Number}\n         */\n        lon: {\n          type: Number,\n          notify: true\n        },\n\n        /**\n         * The visual type of the marker. Sets the color of the marker to indicate\n         * the state of the thing it represents. Choose from 'important', 'warning',\n         * or 'info', or 'unknown'. Defaults to 'info'.\n         *\n         * @type {String}\n         */\n        type: {\n          type: String,\n          reflectToAttribute: true,\n          value: 'info'\n        },\n        // @TODO: The type cannot be updated right now. Need to determine how\n        // to change the class on the Leaflet marker after it is attached\n        // dynamically.\n\n        /**\n         * A reference to the parent instance that this component will attach\n         * to when drawn on the map.\n         *\n         * @type {Object}\n         */\n        parentInstance: {\n          type: Object,\n          notify: true,\n          observer: 'ensureLayerAttached'\n        }\n      }\n    }\n\n    _createLayer() {\n      const marker = this._createMarker();\n      return marker;\n    }\n\n    _attachLayer() {\n      if (this.parentInstance) {\n        this._captureMarkerEvents(this.layerInstance);\n        return this.parentInstance;\n      }\n    }\n\n    /**\n     * Creates a marker from this marker's current properties and returns\n     * the new instance.\n     */\n    _createMarker() {\n      const geometry = [this.lat, this.lon];\n      const icon = this._createStaticMarkerIcon();\n      const marker = L.marker(geometry, { icon: icon });\n      return marker;\n    }\n\n    /**\n     * Creates and configures a styled icon that can be attached to a marker.\n     */\n    _createStaticMarkerIcon() {\n      const options = {};\n\n      // To get shady DOM CSS styling, we need to hack `style-scope px-map`\n      // onto the className to have styles applied\n      var typeModifier = (this.type && this.type.length) ? `static-map-icon--${this.type}` : '';\n      options.className = `static-map-icon ${typeModifier}`;\n\n      // HTML that we style with CSS to 'draw' the marker\n      options.html = `\n      <i class=\"static-map-icon__body style-scope px-map\"></i>\n      <i class=\"static-map-icon__marker style-scope px-map\"></i>\n      <i class=\"static-map-icon__descender style-scope px-map\"></i>`\n\n      // Set the icon size, anchor, and popup anchor\n      options.popupAnchor = L.point(1,-38);\n      options.iconSize = L.point(50, 50);\n      options.iconAnchor = L.point(9.01, 39.5);\n\n      return L.divIcon(options);\n    }\n\n    /**\n     * Configures handler functions to capture, react to, or forward events\n     * from a marker instance.\n     *\n     * @param {Object} marker\n     */\n    _captureMarkerEvents(marker) {\n      marker.on('add', (evt) => {\n        this.fire(`px-map-marker-${evt.type}`, evt);\n      }, this);\n    }\n\n  }\n\n  /* Register this component with the Polymer constructor. */\n  Polymer(PxMapStaticMarker);\n})()\n\n\n// (function(){\n//   'use strict';\n//\n//   class PxMapStaticMarker {\n//     /* Name for the component */\n//     get is() { return 'px-map-static-marker'; }\n//\n//     /* Behaviors to import for this component */\n//     get behaviors() { return [window.PxMapBehavior.DistributeProperties]; }\n//\n//     /* Properties to attach to distributed light DOM children */\n//     get distributions() { return ['markerInstance']; }\n//\n//     /* Properties for this component */\n//     get properties() {\n//       return {\n//         /**\n//          * The latitude of the marker. Set a value to draw the maker at a default\n//          * latitude. Listen for updates if the marker is draggable or\n//          * created dynamically by the user.\n//          *\n//          * @type {Number}\n//          */\n//         lat: {\n//           type: Number,\n//           notify: true\n//         },\n//\n//         /**\n//         * The longitude of the marker. Set a value to draw the maker at a default\n//         * longitude. Listen for updates if the marker is draggable or\n//         * created dynamically by the user.\n//          *\n//          * @type {Number}\n//          */\n//         lon: {\n//           type: Number,\n//           notify: true\n//         },\n//\n//         /**\n//          * The marker instance created by this component and attached to a layer.\n//          * Used to show a point on the map.\n//          *\n//          * @type {Object}\n//          */\n//         markerInstance: {\n//           type: Object,\n//           notify: true,\n//           readOnly: true\n//         },\n//\n//         /**\n//          * A reference to the layer instance passed down from the parent\n//          * `px-map-overlay-layer` this marker belongs to. Used by the component\n//          * to draw itself on the layer.\n//          *\n//          * @type {Object}\n//          */\n//         layerInstance: {\n//           type: Object,\n//           notify: true\n//         },\n//\n//         /**\n//          * A reference to the active map instance passed down from `px-map`.\n//          * Used by this component to draw itself on the map.\n//          *\n//          * @type {Object}\n//          */\n//         mapInstance: {\n//           type: Object,\n//           notify: true\n//         }\n//       }\n//     }\n//\n//     attached() {\n//       window.requestAnimationFrame(this._drawMarker.bind(this));\n//     }\n//\n//     /**\n//      * Attempts to create the marker so it can be attached to a layer.\n//      */\n//     _drawMarker() {\n//       if (!this.markerInstance) {\n//         let marker = this._createMarker();\n//         this._setMarkerInstance(marker);\n//       }\n//       this._attachMarkerToMap();\n//     }\n//\n//     /**\n//      * If a layer has been applied to this marker, attach the marker to the layer\n//      * so it can be drawn on the map. If no layer instance is ready, throws the\n//      * task back into the stack to attach to the layer once it's ready.\n//      */\n//     _attachMarkerToMap() {\n//       if (this.markerInstance && this.layerInstance && this.layerInstance.hasLayer && !this.layerInstance.hasLayer(this.markerInstance)) {\n//         this.markerInstance.addTo(this.layerInstance);\n//       }\n//       else {\n//         window.requestAnimationFrame(this._attachMarkerToMap.bind(this));\n//       }\n//     }\n//\n//     /**\n//      * Creates a marker from this marker's current properties and returns\n//      * the new instance.\n//      */\n//     _createMarker() {\n//       // Create the marker instance\n//       const geometry = [this.lat, this.lon];\n//       const icon = this._createStaticMarkerIcon();\n//       const marker = L.marker(geometry, { icon: icon });\n//\n//       // Attach event handlers to the marker\n//       this._captureMarkerEvents(marker);\n//\n//       // Return the marker instance to be attached\n//       return marker;\n//     }\n//\n//     /**\n//      * Creates and configures a styled icon that can be attached to a marker.\n//      */\n//     _createStaticMarkerIcon() {\n//       const options = {};\n//\n//       // To get shady DOM CSS styling, we need to hack `style-scope px-map`\n//       // onto the className to have styles applied\n//       options.className = 'static-map-icon style-scope px-map';\n//\n//       // HTML that we style with CSS to 'draw' the marker\n//       options.html = `\n//       <i class=\"static-map-icon__body style-scope px-map\"></i>\n//       <i class=\"static-map-icon__marker style-scope px-map\"></i>\n//       <i class=\"static-map-icon__descender style-scope px-map\"></i>`\n//\n//       // Anchor the popup open position\n//       options.popupAnchor = L.point(1,-38);\n//\n//       return L.divIcon(options);\n//     }\n//\n//     /**\n//      * Configures handler functions to capture, react to, or forward events\n//      * from a marker instance.\n//      *\n//      * @param {Object} marker\n//      */\n//     _captureMarkerEvents(marker) {\n//       marker.on('add', (evt) => {\n//         this.fire(`px-map-marker-${evt.type}`, evt);\n//       }, this);\n//     }\n//\n//   }\n//\n//   /* Register this component with the Polymer constructor. */\n//   Polymer(PxMapStaticMarker);\n// })()\n"]}