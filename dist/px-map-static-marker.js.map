{"version":3,"sources":["px-map-static-marker.es6.js"],"names":["PxMapStaticMarker","options","_getStaticMarkerOptions","L","divIcon","defaults","className","_getStaticMarkerClasses","html","iconSize","point","iconAnchor","popupAnchor","classes","push","type","length","showBadge","join","elementInstance","newClasses","split","activeClasses","icon","classesToRemove","filter","indexOf","classesToAdd","domEl","getElement","DomUtil","removeClass","addClass","ns","window","PxMapBehavior","DistributeProperties","ElementInstance","LayerInstance","MarkerInstance","String","reflectToAttribute","value","observer","Boolean","Polymer"],"mappings":"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","file":"px-map-static-marker.js","sourcesContent":["(function(){\n  'use strict';\n\n  class PxMapStaticMarker {\n    /* Name for the component */\n    get is() {\n      return 'px-map-static-marker';\n    }\n\n    /* Behaviors to import for this component */\n    get behaviors() {\n      const ns = window.PxMapBehavior;\n      return [\n        ns.DistributeProperties,\n        ns.ElementInstance,\n        ns.LayerInstance,\n        ns.MarkerInstance\n      ];\n    }\n\n    /* Properties for this component */\n    get properties() {\n      return {\n        /**\n         * The visual type of the marker. Sets the color of the marker to indicate\n         * the state of the thing it represents. Choose from 'important', 'warning',\n         * or 'info', or 'unknown'. Defaults to 'info'.\n         *\n         * @type {String}\n         */\n        type: {\n          type: String,\n          reflectToAttribute: true,\n          value: 'info',\n          observer: '_updateStaticMarkerClasses'\n        },\n\n        /**\n         * Shows a small notification badge on the icon that indicates there is\n         * some relevant updated information about the marker.\n         *\n         * @type {Object}\n         */\n        showBadge: {\n          type: Boolean,\n          value: true,\n          observer: '_updateStaticMarkerClasses'\n        }\n      }\n    }\n\n    _createMarkerIcon() {\n      const options = this._getStaticMarkerOptions();\n      return L.divIcon(options);\n    }\n\n    _getStaticMarkerOptions(defaults={}) {\n      const options = defaults;\n\n      // Can be updated later if the `type` or `showBadge` options change\n      options.className = this._getStaticMarkerClasses();\n\n      // Build the inner HTML of the icon, which CSS will hook into to\n      // Note: Don't update HTML dynamically. Update the marker classes\n      // and change visibility/style of the marker with a modifier.\n      options.html =\n        `<i class=\"static-map-icon__body style-scope px-map\"></i>\n         <i class=\"static-map-icon__descender style-scope px-map\"></i>\n         <i class=\"static-map-icon__badge style-scope px-map\"></i>`\n\n      // These values are static, based on the CSS styles of the popup anchor\n      // Position the icon and anchor relative to the underlying map geometry\n      options.iconSize = L.point(50, 50);\n      options.iconAnchor = L.point(9.01, 39.5);\n      options.popupAnchor = L.point(1,-38);\n\n      return options;\n    }\n\n    _getStaticMarkerClasses() {\n      const classes = [];\n\n      // Base class\n      classes.push('static-map-icon');\n      // Type modifier\n      if (this.type && this.type.length) classes.push(`static-map-icon--${this.type}`);\n      // Badge modifier\n      if (this.showBadge) classes.push(`static-map-icon--with-badge`);\n\n      return classes.join(' ');\n    }\n\n    _updateStaticMarkerClasses() {\n      if (!this.elementInstance) return;\n\n      const newClasses = this._getStaticMarkerClasses().split(' ');\n      const activeClasses = this.elementInstance.options.icon.options.className.split(' ');\n\n      const classesToRemove = activeClasses.filter(\n        (className) => newClasses.indexOf(className) === -1);\n      const classesToAdd = newClasses.filter(\n        (className) => activeClasses.indexOf(className) === -1);\n\n      let domEl;\n\n      if (classesToRemove) {\n        domEl = domEl || this.elementInstance.getElement();\n        for (let className of classesToRemove) {\n          L.DomUtil.removeClass(domEl, className);\n        }\n      }\n\n      if (classesToAdd) {\n        domEl = domEl || this.elementInstance.getElement();\n        for (let className of classesToAdd) {\n          L.DomUtil.addClass(domEl, className);\n        }\n      }\n\n      if (classesToRemove || classesToAdd) {\n        this.elementInstance.options.icon.options.className = newClasses.join(' ');\n      }\n    }\n\n  }\n\n  /* Register this component with the Polymer constructor. */\n  Polymer(PxMapStaticMarker);\n})();\n"]}