{"version":3,"sources":["px-map-static-marker.es6.js"],"names":["PxMapStaticMarker","icon","_createStaticMarkerIcon","options","typeModifier","type","length","className","html","popupAnchor","L","point","iconSize","iconAnchor","divIcon","ns","window","PxMapBehavior","DistributeProperties","ElementInstance","LayerInstance","MarkerInstance","String","reflectToAttribute","value","Polymer"],"mappings":"wpBAAA,CAAC,UAAU,CACT,aADS,GAGHA,kBAHG,4KAyCa,CAClB,GAAMC,MAAO,KAAKC,uBAAL,EAAb,CACA,MAAOD,KACR,CA5CM,yEAiDmB,CACxB,GAAME,SAAU,EAAhB,CAIA,GAAIC,cAAgB,KAAKC,IAAL,EAAa,KAAKA,IAAL,CAAUC,MAAxB,qBAAsD,KAAKD,IAA3D,CAAoE,EAAvF,CACAF,QAAQI,SAAR,oBAAuCH,YAAvC,CAGAD,QAAQK,IAAR,2MAMAL,QAAQM,WAAR,CAAsBC,EAAEC,KAAF,CAAQ,CAAR,CAAU,CAAC,EAAX,CAAtB,CACAR,QAAQS,QAAR,CAAmBF,EAAEC,KAAF,CAAQ,EAAR,CAAY,EAAZ,CAAnB,CACAR,QAAQU,UAAR,CAAqBH,EAAEC,KAAF,CAAQ,IAAR,CAAc,IAAd,CAArB,CAEA,MAAOD,GAAEI,OAAF,CAAUX,OAAV,CACR,CArEM,8BAKE,CACP,MAAO,sBACR,CAPM,qCAUS,CACd,GAAMY,IAAKC,OAAOC,aAAlB,CACA,MAAO,CACLF,GAAGG,oBADE,CAELH,GAAGI,eAFE,CAGLJ,GAAGK,aAHE,CAILL,GAAGM,cAJE,CAMR,CAlBM,sCAqBU,CACf,MAAO,CAQLhB,KAAM,CACJA,KAAMiB,MADF,CAEJC,mBAAoB,IAFhB,CAGJC,MAAO,MAHH,CARD,CAiBR,CAvCM,gCAyETC,QAAQzB,iBAAR,CACD,CA1ED","file":"px-map-static-marker.js","sourcesContent":["(function(){\n  'use strict';\n\n  class PxMapStaticMarker {\n    /* Name for the component */\n    get is() {\n      return 'px-map-static-marker';\n    }\n\n    /* Behaviors to import for this component */\n    get behaviors() {\n      const ns = window.PxMapBehavior;\n      return [\n        ns.DistributeProperties,\n        ns.ElementInstance,\n        ns.LayerInstance,\n        ns.MarkerInstance\n      ];\n    }\n\n    /* Properties for this component */\n    get properties() {\n      return {\n        /**\n         * The visual type of the marker. Sets the color of the marker to indicate\n         * the state of the thing it represents. Choose from 'important', 'warning',\n         * or 'info', or 'unknown'. Defaults to 'info'.\n         *\n         * @type {String}\n         */\n        type: {\n          type: String,\n          reflectToAttribute: true,\n          value: 'info'\n        }\n        // @TODO: The `type` cannot be updated right now. Need to determine how\n        // to change the class on the Leaflet marker after it is attached\n        // dynamically.\n      }\n    }\n\n    _createMarkerIcon() {\n      const icon = this._createStaticMarkerIcon();\n      return icon;\n    }\n\n    /**\n     * Creates and configures a styled icon that can be attached to a marker.\n     */\n    _createStaticMarkerIcon() {\n      const options = {};\n\n      // To get shady DOM CSS styling, we need to hack `style-scope px-map`\n      // onto the className to have styles applied\n      var typeModifier = (this.type && this.type.length) ? `static-map-icon--${this.type}` : '';\n      options.className = `static-map-icon ${typeModifier}`;\n\n      // HTML that we style with CSS to 'draw' the marker\n      options.html = `\n      <i class=\"static-map-icon__body style-scope px-map\"></i>\n      <i class=\"static-map-icon__marker style-scope px-map\"></i>\n      <i class=\"static-map-icon__descender style-scope px-map\"></i>`\n\n      // Set the icon size, anchor, and popup anchor\n      options.popupAnchor = L.point(1,-38);\n      options.iconSize = L.point(50, 50);\n      options.iconAnchor = L.point(9.01, 39.5);\n\n      return L.divIcon(options);\n    }\n  }\n\n  /* Register this component with the Polymer constructor. */\n  Polymer(PxMapStaticMarker);\n})();\n\n// (function(){\n//   'use strict';\n//\n//   class PxMapStaticMarker {\n//     /* Name for the component */\n//     get is() {\n//       return 'px-map-static-marker';\n//     }\n//\n//     /* Behaviors to import for this component */\n//     get behaviors() {\n//       const ns = window.PxMapBehavior;\n//       return [\n//         ns.DistributeProperties,\n//         ns.ElementInstance,\n//         ns.LayerInstance,\n//         ns.LayerGroupInstance\n//       ];\n//     }\n//\n//     /* Properties to attach to distributed light DOM children */\n//     get distributions() { return ['layerInstance as parentInstance']; }\n//\n//     /* Properties for this component */\n//     get properties() {\n//       return {\n//         /**\n//          * The latitude of the marker. Set a value to draw the maker at a default\n//          * latitude. Listen for updates if the marker is draggable or\n//          * created dynamically by the user.\n//          *\n//          * @type {Number}\n//          */\n//         lat: {\n//           type: Number,\n//           notify: true\n//         },\n//\n//         /**\n//         * The longitude of the marker. Set a value to draw the maker at a default\n//         * longitude. Listen for updates if the marker is draggable or\n//         * created dynamically by the user.\n//          *\n//          * @type {Number}\n//          */\n//         lon: {\n//           type: Number,\n//           notify: true\n//         },\n//\n//         /**\n//          * The visual type of the marker. Sets the color of the marker to indicate\n//          * the state of the thing it represents. Choose from 'important', 'warning',\n//          * or 'info', or 'unknown'. Defaults to 'info'.\n//          *\n//          * @type {String}\n//          */\n//         type: {\n//           type: String,\n//           reflectToAttribute: true,\n//           value: 'info'\n//         },\n//         // @TODO: The type cannot be updated right now. Need to determine how\n//         // to change the class on the Leaflet marker after it is attached\n//         // dynamically.\n//\n//         /**\n//          * A reference to the parent instance that this component will attach\n//          * to when drawn on the map.\n//          *\n//          * @type {Object}\n//          */\n//         parentInstance: {\n//           type: Object,\n//           notify: true,\n//           observer: 'ensureLayerAttached'\n//         }\n//       }\n//     }\n//\n//     _createLayer() {\n//       const marker = this._createMarker();\n//       return marker;\n//     }\n//\n//     _attachLayer() {\n//       if (this.parentInstance) {\n//         this._captureMarkerEvents(this.layerInstance);\n//         return this.parentInstance;\n//       }\n//     }\n//\n//     /**\n//      * Creates a marker from this marker's current properties and returns\n//      * the new instance.\n//      */\n//     _createMarker() {\n//       const geometry = [this.lat, this.lon];\n//       const icon = this._createStaticMarkerIcon();\n//       const marker = L.marker(geometry, { icon: icon });\n//       return marker;\n//     }\n//\n//     /**\n//      * Creates and configures a styled icon that can be attached to a marker.\n//      */\n//     _createStaticMarkerIcon() {\n//       const options = {};\n//\n//       // To get shady DOM CSS styling, we need to hack `style-scope px-map`\n//       // onto the className to have styles applied\n//       var typeModifier = (this.type && this.type.length) ? `static-map-icon--${this.type}` : '';\n//       options.className = `static-map-icon ${typeModifier}`;\n//\n//       // HTML that we style with CSS to 'draw' the marker\n//       options.html = `\n//       <i class=\"static-map-icon__body style-scope px-map\"></i>\n//       <i class=\"static-map-icon__marker style-scope px-map\"></i>\n//       <i class=\"static-map-icon__descender style-scope px-map\"></i>`\n//\n//       // Set the icon size, anchor, and popup anchor\n//       options.popupAnchor = L.point(1,-38);\n//       options.iconSize = L.point(50, 50);\n//       options.iconAnchor = L.point(9.01, 39.5);\n//\n//       return L.divIcon(options);\n//     }\n//\n//     /**\n//      * Configures handler functions to capture, react to, or forward events\n//      * from a marker instance.\n//      *\n//      * @param {Object} marker\n//      */\n//     _captureMarkerEvents(marker) {\n//       marker.on('add', (evt) => {\n//         this.fire(`px-map-marker-${evt.type}`, evt);\n//       }, this);\n//     }\n//\n//   }\n//\n//   /* Register this component with the Polymer constructor. */\n//   Polymer(PxMapStaticMarker);\n// })();\n"]}