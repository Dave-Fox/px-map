{"version":3,"sources":["px-map-info-control.es6.js"],"names":["PxMapInfoControl","options","_getInfoControlOptions","L","Control","controlBox","defaults","position","_formatPosition","undefined","content","_getInfoControlContent","className","autoHide","length","autoOpen","set","elementInstance","setContent","_autoHideOrShowInfoControl","_content","hidden","closeBox","openBox","evt","detail","control","name","stopPropagation","popup","listen","unlisten","window","PxMapBehavior","ElementInstance","ControlInstance","type","String","notify","maxWidth","value","maxHeight","observer","Boolean","Polymer"],"mappings":"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","file":"px-map-info-control.js","sourcesContent":["(function(){\n  'use strict';\n\n  class PxMapInfoControl {\n    /* Name for the component */\n    get is() { return 'px-map-info-control'; }\n\n    /* Behaviors to import for this component */\n    get behaviors() {\n      return [\n        window.PxMapBehavior.ElementInstance,\n        window.PxMapBehavior.ControlInstance\n      ];\n    }\n\n    get parentListeners() {\n      return {\n        'px-map-info-control-bind' : '_handleInfoControlBind',\n        'px-map-info-control-unbind' : '_handleInfoControlUnbind'\n      }\n    }\n\n    /* Properties for this component */\n    get properties() {\n      return {\n        /**\n         * A name for the control. Will be used by elements on the map to send\n         * messages to a specific control. This name should be unique among\n         * all controls, unless you want multiple controls to recieve the\n         * same message.\n         *\n         * @type {String}\n         */\n        name: {\n          type: String,\n          notify: true\n        },\n\n        /**\n         * The maximum width (in pixels) to set for the info box. Do not include\n         * the units (e.g. set to '300' not '300px').\n         *\n         * @type {String}\n         */\n        maxWidth: {\n          type: String,\n          value: '300'\n        },\n\n        /**\n         * The maximum height (in pixels) to set for the info box. Do not include\n         * the units (e.g. set to '300' not '300px'). Do not set to allow the\n         * popup to grow to fit its children.\n         *\n         * @type {String}\n         */\n        maxHeight: {\n          type: String\n        },\n\n        /**\n         * Stringified HTML to set as the info box's content. Changing the content\n         * will update the info box.\n         *\n         * @type {String}\n         */\n        content: {\n          type: String,\n          observer: '_updateInfoControlContent'\n        },\n\n        /**\n         * Is `true` if the info box is hidden. Can be set to change the info box's\n         * visibility, or listened to for updates on its visibility.\n         *\n         * @type {Boolean}\n         */\n        hidden: {\n          type: Boolean,\n          value: false,\n          notify: true,\n          observer: '_updateInfoControlVisibility'\n        },\n\n        /**\n         * Automatically hides the info box when its content is empty, and shows\n         * it when its content is not empty.\n         *\n         * @type {Boolean}\n         */\n        autoHide: {\n          type: Boolean,\n          value: true\n        }\n      }\n    }\n\n    _createElementInstance() {\n      const options = this._getInfoControlOptions();\n      return L.Control.controlBox(options);\n    }\n\n    _getInfoControlOptions(defaults={}) {\n      const options = defaults;\n\n      options.position = this._formatPosition(this.position || '') || undefined;\n      options.content = this._getInfoControlContent();\n      options.className = 'map-info-control';\n      // If autoHide is on, and the content is empty, tell the info box to make\n      // itself hidden on load\n      if (this.autoHide && !options.content.length) {\n        options.autoOpen = false;\n        this.set('hidden', true);\n      } else {\n        options.autoOpen = true;\n      }\n\n      return options;\n    }\n\n    _updateInfoControlContent() {\n      if (!this.elementInstance) return;\n\n      const content = this._getInfoControlContent();\n      this.elementInstance.setContent(content);\n\n      if (this.autoHide) {\n        this._autoHideOrShowInfoControl();\n      }\n    }\n\n    _autoHideOrShowInfoControl() {\n      if (!this.autoHide) return;\n\n      if (!this._content || !this._content.length) {\n        this.set('hidden', true);\n      } else {\n        this.set('hidden', false);\n      }\n    }\n\n    _updateInfoControlVisibility() {\n      if (!this.elementInstance) return;\n\n      if (this.hidden) {\n        this.elementInstance.closeBox();\n      } else {\n        this.elementInstance.openBox();\n      }\n    }\n\n    _getInfoControlContent() {\n      this._content = this.content || '';\n      return this._content;\n    }\n\n    _handleInfoControlBind(evt) {\n      if (evt.detail && evt.detail.control === this.name) {\n        evt.stopPropagation();\n\n        this.set('content', evt.detail.content || '');\n        if (evt.detail.popup) this.listen(evt.detail.popup, 'px-map-popup-content-changed', '_handlePopupChanged');\n      }\n    }\n\n    _handleInfoControlUnbind(evt) {\n      if (evt.detail && evt.detail.control === this.name) {\n        evt.stopPropagation();\n\n        this.set('content', evt.detail.content || '');\n        if (evt.detail.popup) this.unlisten(evt.detail.popup, 'px-map-popup-content-changed', '_handlePopupChanged');\n      }\n    }\n\n    _handlePopupChanged(evt) {\n      if (evt.detail && evt.detail.content) {\n        evt.stopPropagation();\n\n        this.set('content', evt.detail.content || '');\n      }\n    }\n  }\n\n  /* Register this component with the Polymer constructor. */\n  Polymer(PxMapInfoControl);\n})();\n"]}