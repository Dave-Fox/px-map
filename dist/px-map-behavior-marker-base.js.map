{"version":3,"sources":["px-map-behavior-marker-base.es6.js"],"names":["MarkerBaseImpl","properties","lat","type","Number","notify","observer","lng","name","String","canAddInst","createInst","options","L","marker","geometry","config","updateInst","lastOptions","nextOptions","elementInst","setLatLng","icon","setIcon","getOptions","getLatLng","title","getIcon","latLng","Error","namespace","window","PxMapBehavior","MarkerBase","LayerBase","Common","LayerParent"],"mappings":"aAAA,CAAC,UAAW,CACV,aAMA,GAAMA,gBAAiB,CACrBC,WAAY,CAQVC,IAAK,CACHC,KAAMC,MADH,CAEHC,OAAQ,IAFL,CAGHC,SAAU,kBAHP,CARK,CAqBVC,IAAK,CACHJ,KAAMC,MADH,CAEHC,OAAQ,IAFL,CAGHC,SAAU,kBAHP,CArBK,CAmCVE,KAAM,CACJL,KAAMM,MADF,CAEJJ,OAAQ,IAFJ,CAGJC,SAAU,kBAHN,CAnCI,CADS,CA2CrBI,UA3CqB,sBA2CR,CACX,MAAQ,OAAO,MAAKR,GAAZ,GAAoB,QAArB,EAAmC,MAAO,MAAKK,GAAZ,GAAoB,QAC/D,CA7CoB,CA+CrBI,UA/CqB,qBA+CVC,OA/CU,CA+CD,CAClB,MAAOC,GAAEC,MAAF,CAASF,QAAQG,QAAjB,CAA2BH,QAAQI,MAAnC,CACR,CAjDoB,CAmDrBC,UAnDqB,qBAmDVC,WAnDU,CAmDGC,WAnDH,CAmDgB,CACnC,GAAID,YAAYH,QAAZ,GAAyBI,YAAYJ,QAAzC,CAAmD,CACjD,KAAKK,WAAL,CAAiBC,SAAjB,CAA2BF,YAAYJ,QAAvC,CACD,CACD,GAAIG,YAAYF,MAAZ,CAAmBM,IAAnB,GAA4BH,YAAYH,MAAZ,CAAmBM,IAAnD,CAAyD,CACvD,KAAKF,WAAL,CAAiBG,OAAjB,CAAyBJ,YAAYH,MAAZ,CAAmBM,IAA5C,CACD,CACF,CA1DoB,CA4DrBE,UA5DqB,sBA4DR,CACX,GAAMT,UAAW,KAAKU,SAAL,EAAjB,CAEA,GAAMT,QAAS,EAAf,CACAA,OAAOU,KAAP,CAAgB,KAAKlB,IAAL,EAAa,EAA7B,CACAQ,OAAOM,IAAP,CAAc,KAAKK,OAAL,EAAd,CAEA,MAAO,CAAEZ,iBAAF,CAAYC,aAAZ,CACR,CApEoB,CAsErBS,SAtEqB,qBAsET,CACV,GAAI,CAAC,KAAKvB,GAAN,EAAa,CAAC,KAAKK,GAAvB,CAA4B,MAAO,EAAP,CAC5B,MAAOM,GAAEe,MAAF,CAAS,KAAK1B,GAAd,CAAmB,KAAKK,GAAxB,CACR,CAzEoB,CA6ErBoB,OA7EqB,mBA6EX,CACR,KAAM,IAAIE,MAAJ,CAAU,2CAAV,CACP,CA/EoB,CAAvB,CAkFA,GAAMC,WAAaC,OAAOC,aAAP,CAAuBD,OAAOC,aAAP,EAAwB,EAAlE,CACAF,UAAUG,UAAV,CAAuB,CACrBH,UAAUI,SADW,CAErBJ,UAAUK,MAAV,CAAiBC,WAFI,CAGrBpC,cAHqB,CAKxB,CA/FD","file":"px-map-behavior-marker-base.js","sourcesContent":["(function() {\n  'use strict';\n\n  /**\n   *\n   * @polymerBehavior PxMapBehavior.MarkerBase\n   */\n  const MarkerBaseImpl = {\n    properties: {\n      /**\n       * The latitude of the marker. Set a value to draw the maker at a coordinate\n       * when the map is loaded. Listen for updates to track the marker's location\n       * if the marker is draggable or created dynamically by the user.\n       *\n       * @type {Number}\n       */\n      lat: {\n        type: Number,\n        notify: true,\n        observer: 'shouldUpdateInst'\n      },\n\n      /**\n       * The longitude of the marker. Set a value to draw the maker at a coordinate\n       * when the map is loaded. Listen for updates to track the marker's location\n       * if the marker is draggable or created dynamically by the user.\n       *\n       * @type {Number}\n       */\n      lng: {\n        type: Number,\n        notify: true,\n        observer: 'shouldUpdateInst'\n      },\n\n      /**\n       * A human-readable name for this layer group. If a tooltip is attached,\n       * this name will be shown on hover over the marker. If the map has a layer\n       * control panel, the user will click this name to show, hide, or\n       * manipulate this layer.\n       *\n       * @type {String}\n       */\n      name: {\n        type: String,\n        notify: true,\n        observer: 'shouldUpdateInst'\n      }\n    },\n\n    canAddInst() {\n      return (typeof this.lat === 'number') && (typeof this.lng === 'number');\n    },\n\n    createInst(options) {\n      return L.marker(options.geometry, options.config);\n    },\n\n    updateInst(lastOptions, nextOptions) {\n      if (lastOptions.geometry !== nextOptions.geometry) {\n        this.elementInst.setLatLng(nextOptions.geometry);\n      }\n      if (lastOptions.config.icon !== nextOptions.config.icon) {\n        this.elementInst.setIcon(nextOptions.config.icon);\n      }\n    },\n\n    getOptions() {\n      const geometry = this.getLatLng();\n\n      const config = {};\n      config.title = (this.name || '');\n      config.icon = this.getIcon();\n\n      return { geometry, config };\n    },\n\n    getLatLng() {\n      if (!this.lat || !this.lng) return [];\n      return L.latLng(this.lat, this.lng);\n    },\n\n    // Should be implemented by behaviors that extend MarkerBase\n\n    getIcon() {\n      throw new Error('The `getIcon` method must be implemented.');\n    }\n  };\n\n  const namespace = (window.PxMapBehavior = window.PxMapBehavior || {});\n  namespace.MarkerBase = [\n    namespace.LayerBase,\n    namespace.Common.LayerParent,\n    MarkerBaseImpl\n  ];\n})()\n"]}