{"version":3,"sources":["px-map-behavior-icon.es6.js"],"names":["StaticIcon","settings","icon","createIcon","type","badge","className","_generateStaticIconClasses","html","iconSize","L","point","iconAnchor","popupAnchor","options","divIcon","classes","length","push","join","SymbolIcon","symbol","_generateSymbolIconClasses","ClusterIcon","count","countByType","colorsByType","containerSize","pathSize","borderSize","chartSize","svg","_generateClusterIconSVG","typeKeys","Object","keys","typeObjs","map","color","sort","a","b","types","colors","i","len","total","createPieChart","groupsArray","colorsArray","pieGeneratorFn","Px","d3","pie","arcData","radius","innerRadius","arcPathGeneratorFn","arc","outerRadius","pathListTmpl","paths","pathTmpl","pathData","pathIndex","klass","window","PxMap"],"mappings":"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","file":"px-map-behavior-icon.js","sourcesContent":["(function() {\n  'use strict';\n\n  /**\n   *\n   * @class PxMap.StaticIcon\n   */\n  class StaticIcon {\n    constructor(settings={}) {\n      this.icon = this.createIcon(settings);\n      return this.icon;\n    }\n\n    createIcon(settings={}) {\n      // Extract `type` and `badge` from settings with defaults\n      let { type='info', badge=false } = settings;\n\n      const className = this._generateStaticIconClasses(type, badge);\n\n      // Static options\n      const html = `\n        <i class=\"map-icon-static__body\"></i>\n        <i class=\"map-icon-static__descender\"></i>\n        <i class=\"map-icon-static__badge\"></i>\n      `;\n      const iconSize = L.point(50,50);\n      const iconAnchor = L.point(9.8, 40.3);\n      const popupAnchor = L.point(1,-38);\n\n      // Define the `divIcon` options\n      const options = {\n        className,\n        html,\n        iconSize,\n        iconAnchor,\n        popupAnchor\n      };\n\n      return L.divIcon(options);\n    }\n\n    _generateStaticIconClasses(type, badge) {\n      const classes = ['map-icon', 'map-icon-static'];\n      if (type && type.length) {\n        classes.push(`map-icon-static--${type}`);\n      }\n      if (badge) {\n        classes.push(`map-icon-static--with-badge`);\n      }\n      return classes.join(' ');\n    }\n  };\n\n  /**\n   *\n   * @class PxMap.SymbolIcon\n   */\n  class SymbolIcon {\n    constructor(settings={}) {\n      this.icon = this.createIcon(settings);\n      return this.icon;\n    }\n\n    createIcon(settings={}) {\n      // Extract `type` and `badge` from settings with defaults\n      let { type='info', badge=false, symbol='fa fa-bolt' } = settings;\n      const className = this._generateSymbolIconClasses(type, badge);\n\n      // Symbol options\n      const html = `\n        <div class=\"map-icon-symbol__wrapper\">\n          <i class=\"map-icon-symbol__body\">\n            <div class=\"map-icon-symbol__symbol--container flex flex--middle flex--center\">\n              <i class=\"map-icon-symbol__symbol ${symbol}\"></i>\n            </div>\n          </i>\n          <i class=\"map-icon-symbol__descender\"></i>\n          <i class=\"map-icon-symbol__badge\"></i>\n        </div>\n      `;\n      const iconSize = L.point(55,66);\n      const iconAnchor = L.point(19.8, 65);\n      const popupAnchor = L.point(1,-38);\n\n      // Define the `divIcon` options\n      const options = {\n        className,\n        html,\n        iconSize,\n        iconAnchor,\n        popupAnchor\n      };\n\n      return L.divIcon(options);\n    }\n\n    _generateSymbolIconClasses(type, badge) {\n      const classes = ['map-icon', 'map-icon-symbol'];\n      if (type && type.length) {\n        classes.push(`map-icon-symbol--${type}`);\n      }\n      if (badge) {\n        classes.push(`map-icon-symbol--with-badge`);\n      }\n      return classes.join(' ');\n    }\n  };\n\n  /**\n   *\n   * @class PxMap.ClusterIcon\n   */\n  class ClusterIcon {\n    constructor(settings={}) {\n      this.icon = this.createIcon(settings);\n      return this.icon;\n    }\n\n    createIcon(settings={}) {\n      // Extract `count`, `countByType`, `colorsByType`\n      const { count, countByType, colorsByType, containerSize=50, pathSize=10, borderSize=0, className='' } = settings;\n\n      // The chart size is the container size with the border size subtracted out,\n      // so we can draw and transform our SVG in the right dimensions\n      const chartSize = (containerSize - (borderSize*2));\n\n      // The icon size is a point representing the size of the icon's outer container\n      const iconSize = L.point(containerSize, containerSize);\n\n      // Get the SVG for this icon\n      const svg = this._generateClusterIconSVG(countByType, colorsByType, chartSize, pathSize);\n\n      // Generate the classes and wrapper HTML\n      const classes = `map-icon-cluster ${className||''}`\n      const html = `\n        <div class=\"map-icon-cluster__container\" style=\"width: ${containerSize}px; height: ${containerSize}px\">\n          <i class=\"map-icon-cluster__svg\">${svg}</i>\n          <div class=\"map-icon-cluster__body\">${count}</div>\n        </div>\n      `;\n\n      // Define the `divIcon` options\n      const options = {\n        iconSize: iconSize,\n        className: classes,\n        html: html\n      };\n\n      return L.divIcon(options);\n    }\n\n    _generateClusterIconSVG(countByType, colorsByType, chartSize, pathSize) {\n      // Combine the `countByType` and `colorsByType` into one array of objects,\n      // each describing a type with its associated count and color\n      const typeKeys = Object.keys(countByType);\n      const typeObjs = typeKeys.map(type => ({ type: type, count: countByType[type], color: colorsByType[type] }));\n\n      // Sort the types from highest->lowest\n      typeObjs.sort((a,b) => a.count - b.count);\n\n      // Create two parallel arrays of [types] and [colors]\n      const types = [];\n      const colors = [];\n      let i, len, type, total;\n      for (i=0, len=typeKeys.length; i<len; i++) {\n        type = typeKeys[i];\n        total = countByType[type];\n        types.push(countByType[type]);\n        colors.push(colorsByType[type])\n      }\n\n      // Return the pie chart\n      return this.createPieChart(types, colors, chartSize, pathSize);\n    }\n\n    createPieChart(groupsArray, colorsArray, chartSize, pathSize) {\n      // Create a pie generator and pass it the `groupsArray` to create a set\n      // of arcs we can draw as a donut pie cart\n      const pieGeneratorFn = Px.d3.pie();\n      const arcData = pieGeneratorFn(groupsArray);\n\n      // Calculate the `radius` and `innerRadius` of the chart\n      const radius = (chartSize / 2);\n      const innerRadius = (radius - pathSize);\n\n      // Create a path generator. Individual entries of `arcData` can be passed\n      // in to the path geneator to yield a stringified path that can be\n      // appended to a `<path>` tag's `d` attribute.\n      const arcPathGeneratorFn = Px.d3.arc().outerRadius(radius).innerRadius(innerRadius);\n\n      // Iterate over a list of `arcData` entries and return a block of paths\n      const pathListTmpl = (paths) => paths.map(pathTmpl).join('');\n\n      // For each path, generate a `<path>` tag with the correct attributes\n      const pathTmpl = (pathData, pathIndex) => `<path d=\"${arcPathGeneratorFn(pathData)}\" fill=\"${colorsArray[pathIndex]}\" opacity=\"1\"></path>`;\n\n      return `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"${chartSize}\" height=\"${chartSize}\">\n            <g transform=\"translate(${radius}, ${radius})\">\n                ${pathListTmpl(arcData)}\n            </g>\n        </svg>\n      `;\n    }\n  };\n\n  /* Ensures the klass namespace is created */\n  const klass = (window.PxMap = window.PxMap || {});\n\n  /* Bind StaticIcon klass */\n  klass.StaticIcon = StaticIcon;\n\n  /* Bind SymbolIcon klass */\n  klass.SymbolIcon = SymbolIcon;\n\n  /* Bind ClusterIcon klass */\n  klass.ClusterIcon = ClusterIcon;\n})();\n"]}