{"version":3,"sources":["px-map-behavior-marker-instance.es6.js"],"names":["MarkerInstance","properties","lat","type","Number","notify","observer","lon","name","String","_createElementInstance","marker","_createMarkerInstance","geometry","_getMarkerLatLon","icon","_createMarkerIcon","options","_getMarkerOptions","L","_updateMarkerLatLon","elementInstance","latLonAreDifferent","latLng","lng","updateLatLon","setLatLng","getLatLng","debounce","defaults","title","length","namespace","window","PxMapBehavior"],"mappings":"aAAA,CAAC,UAAW,CACV,aAMA,GAAMA,gBAAiB,CACrBC,WAAY,CAQVC,IAAK,CACHC,KAAMC,MADH,CAEHC,OAAQ,IAFL,CAGHC,SAAU,qBAHP,CARK,CAqBVC,IAAK,CACHJ,KAAMC,MADH,CAEHC,OAAQ,IAFL,CAGHC,SAAU,qBAHP,CArBK,CAmCVE,KAAM,CACJL,KAAMM,MADF,CAEJJ,OAAQ,IAFJ,CAGJC,SAAU,gBAHN,CAnCI,CADS,CA2CrBI,sBA3CqB,kCA2CI,CACvB,GAAMC,QAAS,KAAKC,qBAAL,EAAf,CACA,MAAOD,OACR,CA9CoB,CAgDrBC,qBAhDqB,iCAgDG,CACtB,GAAMC,UAAW,KAAKC,gBAAL,EAAjB,CAEA,GAAMC,MAAO,KAAKC,iBAAL,EAAb,CACA,GAAMC,SAAU,KAAKC,iBAAL,CAAuB,CAAEH,KAAMA,IAAR,CAAvB,CAAhB,CACA,GAAMJ,QAASQ,EAAER,MAAF,CAASE,QAAT,CAAmBI,OAAnB,CAAf,CACA,MAAON,OACR,CAvDoB,CAyDrBG,gBAzDqB,4BAyDF,CACjB,MAAO,CAAC,KAAKZ,GAAN,CAAW,KAAKK,GAAhB,CACR,CA3DoB,CA6DrBa,mBA7DqB,+BA6DC,gBACpB,GAAI,CAAC,KAAKC,eAAN,EAAyB,CAAC,KAAKnB,GAA/B,EAAsC,CAAC,KAAKK,GAAhD,CAAqD,OAErD,GAAMe,oBAAqB,QAArBA,mBAAqB,CAACC,MAAD,QACzBA,QAAOrB,GAAP,GAAe,MAAKA,GAApB,EAA2BqB,OAAOC,GAAP,GAAe,MAAKjB,GADtB,CAA3B,CAEA,GAAMkB,cAAe,QAAfA,aAAe,SACnB,OAAKJ,eAAL,CAAqBK,SAArB,CAA+B,CAAC,MAAKxB,GAAN,CAAW,MAAKK,GAAhB,CAA/B,CADmB,CAArB,CAGA,GAAIe,mBAAmB,KAAKD,eAAL,CAAqBM,SAArB,EAAnB,CAAJ,CAA0D,CACxD,KAAKC,QAAL,CAAc,aAAd,CAA6BH,YAA7B,CAA2C,CAA3C,CACD,CACF,CAxEoB,CA0ErBP,iBA1EqB,6BA0EU,IAAbW,SAAa,2DAAJ,EAAI,CAC7B,GAAMZ,SAAUY,QAAhB,CACAZ,QAAQa,KAAR,CAAiB,KAAKtB,IAAL,EAAa,KAAKA,IAAL,CAAUuB,MAAxB,CAAkC,KAAKvB,IAAvC,CAA8C,EAA9D,CACA,MAAOS,QACR,CA9EoB,CAAvB,CAiFA,GAAMe,WAAaC,OAAOC,aAAP,CAAuBD,OAAOC,aAAP,EAAwB,EAAlE,CACAF,UAAUhC,cAAV,CAA2BA,cAC5B,CA1FD","file":"px-map-behavior-marker-instance.js","sourcesContent":["(function() {\n  'use strict';\n\n  /**\n   *\n   * @polymerBehavior PxMapBehavior.MarkerInstance\n   */\n  const MarkerInstance = {\n    properties: {\n      /**\n       * The latitude of the marker. Set a value to draw the maker at a coordinate\n       * when the map is loaded. Listen for updates to track the marker's location\n       * if the marker is draggable or created dynamically by the user.\n       *\n       * @type {Number}\n       */\n      lat: {\n        type: Number,\n        notify: true,\n        observer: '_updateMarkerLatLon'\n      },\n\n      /**\n       * The longitude of the marker. Set a value to draw the maker at a coordinate\n       * when the map is loaded. Listen for updates to track the marker's location\n       * if the marker is draggable or created dynamically by the user.\n       *\n       * @type {Number}\n       */\n      lon: {\n        type: Number,\n        notify: true,\n        observer: '_updateMarkerLatLon'\n      },\n\n      /**\n       * A human-readable name for this layer group. If a tooltip is attached,\n       * this name will be shown on hover over the marker. If the map has a layer\n       * control panel, the user will click this name to show, hide, or\n       * manipulate this layer.\n       *\n       * @type {String}\n       */\n      name: {\n        type: String,\n        notify: true,\n        observer: '_setMarkerName'\n      }\n    },\n\n    _createElementInstance() {\n      const marker = this._createMarkerInstance();\n      return marker;\n    },\n\n    _createMarkerInstance() {\n      const geometry = this._getMarkerLatLon();\n      // `_createMarkerIcon` is supplied by the component\n      const icon = this._createMarkerIcon();\n      const options = this._getMarkerOptions({ icon: icon });\n      const marker = L.marker(geometry, options);\n      return marker;\n    },\n\n    _getMarkerLatLon() {\n      return [this.lat, this.lon];\n    },\n\n    _updateMarkerLatLon() {\n      if (!this.elementInstance || !this.lat || !this.lon) return;\n\n      const latLonAreDifferent = (latLng) =>\n        latLng.lat !== this.lat || latLng.lng !== this.lon;\n      const updateLatLon = () =>\n        this.elementInstance.setLatLng([this.lat, this.lon]);\n\n      if (latLonAreDifferent(this.elementInstance.getLatLng())) {\n        this.debounce('set-lat-lon', updateLatLon, 1);\n      }\n    },\n\n    _getMarkerOptions(defaults={}) {\n      const options = defaults;\n      options.title = (this.name && this.name.length) ? this.name : '';\n      return options;\n    }\n  };\n\n  const namespace = (window.PxMapBehavior = window.PxMapBehavior || {});\n  namespace.MarkerInstance = MarkerInstance;\n})()\n"]}