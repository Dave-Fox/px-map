{"version":3,"sources":["px-map-behavior-marker-instance.es6.js"],"names":["MarkerInstance","properties","lat","type","Number","notify","lon","draggable","Boolean","value","name","String","_createElementInstance","marker","_createMarkerInstance","geometry","_getLatLon","icon","_createMarkerIcon","options","_getOptions","L","defaults","title","length","namespace","window","PxMapBehavior"],"mappings":"aAAA,CAAC,UAAW,CACV,aAMA,GAAMA,gBAAiB,CACrBC,WAAY,CAQVC,IAAK,CACHC,KAAMC,MADH,CAEHC,OAAQ,IAFL,CARK,CAoBVC,IAAK,CACHH,KAAMC,MADH,CAEHC,OAAQ,IAFL,CApBK,CAiCVE,UAAW,CACTJ,KAAMK,OADG,CAETH,OAAQ,IAFC,CAGTI,MAAO,KAHE,CAjCD,CA+CVC,KAAM,CACJP,KAAMQ,MADF,CAEJN,OAAQ,IAFJ,CA/CI,CADS,CAsDrBO,sBAtDqB,kCAsDI,CACvB,GAAMC,QAAS,KAAKC,qBAAL,EAAf,CACA,MAAOD,OACR,CAzDoB,CA2DrBC,qBA3DqB,iCA2DG,CACtB,GAAMC,UAAW,KAAKC,UAAL,EAAjB,CAEA,GAAMC,MAAO,KAAKC,iBAAL,EAAb,CACA,GAAMC,SAAU,KAAKC,WAAL,CAAiB,CAAEH,KAAMA,IAAR,CAAjB,CAAhB,CACA,GAAMJ,QAASQ,EAAER,MAAF,CAASE,QAAT,CAAmBI,OAAnB,CAAf,CACA,MAAON,OACR,CAlEoB,CAoErBG,UApEqB,sBAoER,CACX,MAAO,CAAC,KAAKd,GAAN,CAAW,KAAKI,GAAhB,CACR,CAtEoB,CAwErBc,WAxEqB,uBAwEI,IAAbE,SAAa,2DAAJ,EAAI,CACvB,GAAMH,SAAUG,QAAhB,CACAH,QAAQZ,SAAR,CAAoB,KAAKA,SAAzB,CACAY,QAAQI,KAAR,CAAiB,KAAKA,KAAL,EAAc,KAAKA,KAAL,CAAWC,MAA1B,CAAoC,KAAKD,KAAzC,CAAiD,EAAjE,CACA,MAAOJ,QACR,CA7EoB,CAAvB,CAgFA,GAAMM,WAAaC,OAAOC,aAAP,CAAuBD,OAAOC,aAAP,EAAwB,EAAlE,CACAF,UAAUzB,cAAV,CAA2BA,cAC5B,CAzFD","file":"px-map-behavior-marker-instance.js","sourcesContent":["(function() {\n  'use strict';\n\n  /**\n   *\n   * @polymerBehavior PxMapBehavior.MarkerInstance\n   */\n  const MarkerInstance = {\n    properties: {\n      /**\n       * The latitude of the marker. Set a value to draw the maker at a coordinate\n       * when the map is loaded. Listen for updates to track the marker's location\n       * if the marker is draggable or created dynamically by the user.\n       *\n       * @type {Number}\n       */\n      lat: {\n        type: Number,\n        notify: true\n      },\n\n      /**\n       * The longitude of the marker. Set a value to draw the maker at a coordinate\n       * when the map is loaded. Listen for updates to track the marker's location\n       * if the marker is draggable or created dynamically by the user.\n       *\n       * @type {Number}\n       */\n      lon: {\n        type: Number,\n        notify: true\n      },\n\n      /**\n       * Allows the user to pick up and drag the marker around the map. Events\n       * will be emitted during the drag, and the marker's `lat` and `lon`\n       * attributes will be updated and notified if the marker is dropped\n       * in a new position.\n       *\n       * @type {Boolean}\n       */\n      draggable: {\n        type: Boolean,\n        notify: true,\n        value: false\n      },\n\n      /**\n       * A human-readable name for this layer group. If a tooltip is attached,\n       * this name will be shown on hover over the marker. If the map has a layer\n       * control panel, the user will click this name to show, hide, or\n       * manipulate this layer.\n       *\n       * @type {String}\n       */\n      name: {\n        type: String,\n        notify: true\n      }\n    },\n\n    _createElementInstance() {\n      const marker = this._createMarkerInstance();\n      return marker;\n    },\n\n    _createMarkerInstance() {\n      const geometry = this._getLatLon();\n      // `_createMarkerIcon` is supplied by the component\n      const icon = this._createMarkerIcon();\n      const options = this._getOptions({ icon: icon });\n      const marker = L.marker(geometry, options);\n      return marker;\n    },\n\n    _getLatLon() {\n      return [this.lat, this.lon];\n    },\n\n    _getOptions(defaults={}) {\n      const options = defaults;\n      options.draggable = this.draggable;\n      options.title = (this.title && this.title.length) ? this.title : '';\n      return options;\n    }\n  };\n\n  const namespace = (window.PxMapBehavior = window.PxMapBehavior || {});\n  namespace.MarkerInstance = MarkerInstance;\n})()\n"]}