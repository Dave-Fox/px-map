{"version":3,"sources":["px-map-behavior-layer.es6.js"],"names":["Layer","properties","layerInstance","type","Object","notify","readOnly","observers","attached","_callCreateLayer","detached","_tryToCallLifecycleHook","ensureLayerAttached","_callAttachLayer","_createLayer","_failedToCreateLayer","layer","addTo","_setLayerInstance","_attachLayer","_failedToAttachLayer","parent","hasLayer","lifecycleName","call","errorMsg","console","log","errToPrint","namespace","window","PxMapBehavior"],"mappings":"aAAA,CAAC,UAAW,CACV,aA2DA,GAAMA,OAAQ,CACZC,WAAY,CASVC,cAAe,CACbC,KAAMC,MADO,CAEbC,OAAQ,IAFK,CAGbC,SAAU,IAHG,CATL,CADA,CAkBZC,UAAW,CAAC,6BAAD,CAlBC,CAoBZC,QApBY,oBAoBD,CACT,GAAI,CAAC,KAAKN,aAAV,CAAyB,CACvB,KAAKO,gBAAL,EACD,CACF,CAxBW,CA0BZC,QA1BY,oBA0BD,CACT,GAAI,KAAKR,aAAT,CAAwB,CACtB,KAAKS,uBAAL,CAA6B,cAA7B,CACD,CACF,CA9BW,CAoCZC,mBApCY,+BAoCU,CACpB,GAAI,KAAKV,aAAT,CAAwB,CACtB,KAAKW,gBAAL,EACD,CACF,CAxCW,CAuDZJ,gBAvDY,4BAuDO,CACjB,GAAI,CAAC,KAAKK,YAAN,EAAuB,MAAO,MAAKA,YAAZ,GAA6B,UAAxD,CAAqE,CACnE,KAAKC,oBAAL,CAA0B,gEAA1B,EACA,MACD,CAED,KAAKJ,uBAAL,CAA6B,oBAA7B,EACA,GAAMK,OAAQ,KAAKF,YAAL,EAAd,CAIA,GAAI,CAACE,KAAD,EAAU,CAACA,MAAMC,KAAjB,EAA2B,MAAOD,OAAMC,KAAb,GAAuB,UAAtD,CAAmE,CACjE,KAAKF,oBAAL,CAA0B,kEAA1B,EACA,MACD,CAGD,KAAKG,iBAAL,CAAuBF,KAAvB,EACA,KAAKL,uBAAL,CAA6B,mBAA7B,CACD,CA1EW,CA+FZE,gBA/FY,4BA+FO,CACjB,GAAI,CAAC,KAAKM,YAAN,EAAuB,MAAO,MAAKA,YAAZ,GAA6B,UAAxD,CAAqE,CACnE,KAAKC,oBAAL,CAA0B,gEAA1B,EACA,MACD,CAED,GAAMC,QAAS,KAAKF,YAAL,EAAf,CAKA,GAAI,CAACE,MAAD,EAAW,CAAC,KAAKnB,aAArB,CAAoC,CAClC,MACD,CAGD,GAAI,CAACmB,OAAOC,QAAP,CAAgB,KAAKpB,aAArB,CAAL,CAA0C,CAExC,KAAKA,aAAL,CAAmBe,KAAnB,CAAyBI,MAAzB,EACA,KAAKV,uBAAL,CAA6B,mBAA7B,CACD,CACF,CApHW,CAiIZA,uBAjIY,kCAiIYY,aAjIZ,CAiI2B,CACrC,GAAI,KAAKA,aAAL,GAAwB,MAAO,MAAKA,aAAL,CAAP,GAA+B,UAA3D,CAAwE,CACtE,KAAKA,aAAL,EAAoBC,IAApB,CAAyB,IAAzB,CACD,CACF,CArIW,CA8IZT,oBA9IY,+BA8ISU,QA9IT,CA8ImB,CAC7B,GAAIC,SAAY,MAAOA,SAAQC,GAAf,GAAuB,UAAvC,CAAoD,CAClD,GAAMC,YAAaH,UAAY,EAA/B,CACAC,QAAQC,GAAR,CAAY,gEAAZ,EACAD,QAAQC,GAAR,CAAYC,UAAZ,CACD,CACF,CApJW,CA6JZR,oBA7JY,+BA6JSK,QA7JT,CA6JmB,CAC7B,GAAIC,SAAY,MAAOA,SAAQC,GAAf,GAAuB,UAAvC,CAAoD,CAClD,GAAMC,YAAaH,UAAY,EAA/B,CACAC,QAAQC,GAAR,CAAY,iEAAZ,EACAD,QAAQC,GAAR,CAAYC,UAAZ,CACD,CACF,CAnKW,CAAd,CAuKA,GAAMC,WAAaC,OAAOC,aAAP,CAAuBD,OAAOC,aAAP,EAAwB,EAAlE,CACAF,UAAU7B,KAAV,CAAkBA,KACnB,CArOD","file":"px-map-behavior-layer.js","sourcesContent":["(function() {\n  'use strict';\n\n  /**\n   * Defines a set of shared behaviors for map components that behave like a\n   * Layer. Layers are used to display data or groups of data on the map, and\n   * are fixed to specific positions on the surface of the map. When the map\n   * is panned or zoomed, the layers move with it.\n   *\n   * The `PxMapBehavior.Layer` is loosely bound to the Leaflet library's\n   * `L.Layer` class, and provides a web component friendly wrapper around\n   * the Leaflet library's methods.\n   *\n   * Components should import this behavior to assist in drawing themselves,\n   * attaching themselves to the map, and cleaning up and removing themselves\n   * from the map.\n   *\n   * ## Lifecycle events\n   *\n   * Components or other behaviors that inherit from `PxMapBehavior.Layer`\n   * should use these methods to prepare and attach themselves to the map:\n   *\n   * - `_createLayer()` [REQUIRED]\n   *\n   *   Called to create the layer to add to the map. Must return an instance of\n   *   a Leaflet sub-class that inherits from the `L.Layer` class. If the method\n   *   is not defined, or doesn't return a valid instance, the layer cannot be\n   *   drawn and will stop and send an error message. The returned instance\n   *   will be assigned to `this.layerInstance` and will be accessible in future\n   *   lifecycle events.\n   *\n   * - `_beforeCreateLayer()` [OPTIONAL]\n   *\n   *   Called before the layer is created.\n   *\n   * - `_afterCreateLayer()` [OPTIONAL]\n   *\n   *   Called after the layer is created and before it is attached to the map.\n   *   You can set up additional custom listeners here or perform other actions.\n   *\n   * - `_attachLayer()` [REQUIRED]\n   *\n   *   Called to attach the layer to its parent instance (usually a\n   *   map aor another layer instance). Must return a `parentInstance`\n   *   that inherits from the `L.Layer` or `L.Map` class that can have a\n   *   layer attached to it with `this.layerInstance.addTo(parentInstance)`\n   *\n   * - `_afterAttachLayer()`\n   *\n   *   Called after the layer is attached to the map. If anything else needs to\n   *   know about the layer being attached, you can send notifications here.\n   *\n   * - `_detachLayer()`\n   *\n   *    Called when the layer is removed from the map and the DOM. If you\n   *    defined event listeners or observers that need to be torn down,\n   *    remove them here.\n   *\n   * @polymerBehavior PxMapBehavior.Layer\n   */\n  const Layer = {\n    properties: {\n      /**\n       * The component's Layer instance, which will be used to attach and\n       * draw it on the map. Set internally by the component and notified\n       * upward so it can be shared with children or peers to control\n       * the layer's state.\n       *\n       * @type {Object}\n       */\n      layerInstance: {\n        type: Object,\n        notify: true,\n        readOnly: true\n      }\n    },\n\n    // When the `layerInstance` attribute is defined, call `_attachLayer`\n    observers: ['_attachLayer(layerInstance)'],\n\n    attached() {\n      if (!this.layerInstance) {\n        this._callCreateLayer();\n      }\n    },\n\n    detached() {\n      if (this.layerInstance) {\n        this._tryToCallLifecycleHook('_detachLayer');\n      }\n    },\n\n    /**\n     * Call this method to ensure a parent instance returned by the\n     * `_attachLayer` method has the layer attached to it.\n     */\n    ensureLayerAttached() {\n      if (this.layerInstance) {\n        this._callAttachLayer();\n      }\n    },\n\n    /**\n     * Attempts to call the `_createLayer` method on the component or\n     * sub-behavior that implements this behavior. If no `_createLayer`\n     * method is defined, will log an error and stop executing.\n     *\n     * The `_createLayer` method should return a Leaflet class instance\n     * that inherits from Leaflet's `L.Layer` class. The returned instance\n     * will be added to the map by calling its `addTo()` method. It will be\n     * assigned to `this.layerInstance` for later use.\n     *\n     * Attempts to call the `_beforeCreateLayer` method before kicking\n     * off, and the `_afterCreateLayer` method after kicking off.\n     */\n    _callCreateLayer() {\n      if (!this._createLayer && (typeof this._createLayer !== 'function')) {\n        this._failedToCreateLayer('The `_createLayer` method is not defined or is not a function.');\n        return;\n      }\n\n      this._tryToCallLifecycleHook('_beforeCreateLayer');\n      const layer = this._createLayer();\n\n      // If no layer was returned, or if it doesn't have the necessary methods,\n      // we can't recover and have to error out\n      if (!layer || !layer.addTo || (typeof layer.addTo !== 'function')) {\n        this._failedToCreateLayer('The `_createLayer` method did not return a valid layer instance.');\n        return;\n      }\n\n      // Otherwise, set the instance\n      this._setLayerInstance(layer);\n      this._tryToCallLifecycleHook('_afterCreateLayer')\n    },\n\n    /**\n     * Attempts to call the `_attachLayer` method on the component or\n     * sub-behavior that implements this behavior. If no `_attachLayer`\n     * method is defined, will log an error and stop executing.\n     *\n     * The `_attachLayer` method should return a Leaflet class instance\n     * that inherits from Leaflet's `L.Layer`, `L.Map`, or another\n     * valid class that that can have a layer attached to it with the\n     * `addTo` method.\n     *\n     * For example, if the `_attachLayer` returns a `parentInstance`,\n     * this layer will be attached to the returned instance with\n     * `this.layerInstance.addTo(parentInstance)`\n     *\n     * If no parent is ready, the `_attachLayer` method can return any\n     * falsey value (e.g. `false` or `null`) and the component can\n     * call the `_ensureLayerAttached` method manually later when the parent\n     * is ready.\n     */\n    _callAttachLayer() {\n      if (!this._attachLayer && (typeof this._attachLayer !== 'function')) {\n        this._failedToAttachLayer('The `_attachLayer` method is not defined or is not a function.');\n        return;\n      }\n\n      const parent = this._attachLayer();\n\n      // If no parent was returned, or no layer instance is defined,\n      // this method can be called again later. Stop execution\n      // quietly and wait for retry.\n      if (!parent || !this.layerInstance) {\n        return;\n      }\n\n      // If the parent already has the layer, we don't need to do anything\n      if (!parent.hasLayer(this.layerInstance)) {\n        // Attach the layer to the parent\n        this.layerInstance.addTo(parent);\n        this._tryToCallLifecycleHook('_afterAttachLayer');\n      }\n    },\n\n    /**\n     * Attempts to call the method named in `lifecycleName` defined on\n     * this component. If no method with name `lifecycleName` is defined,\n     * skips the lifecycle event and continues.\n     *\n     * You should ensure you bind the `this` scope of the calling function\n     * before you pass this in. For example, you can call it with\n     * `this._tryToCallLifecycleHook('_beforeCreateLayer').bind(this)`\n     *\n     * @param {String} lifecycleName - The name of a method (as a string) to try to call\n     */\n    _tryToCallLifecycleHook(lifecycleName) {\n      if (this[lifecycleName] && (typeof this[lifecycleName] === 'function')) {\n        this[lifecycleName].call(this);\n      }\n    },\n\n    /**\n     * If the `_createLayer` method is not defined, the layer cannot be created.\n     * This method is called to notify the developer of the problem by sending\n     * a message to the browser console.\n     *\n     * @param {String} errorMsg - A descriptive message for the error.\n     */\n    _failedToCreateLayer(errorMsg) {\n      if (console && (typeof console.log === 'function')) {\n        const errToPrint = errorMsg || '';\n        console.log('[PX-MAP-BEHAVIOR-LAYER] ERROR: The layer could not be created.');\n        console.log(errToPrint);\n      }\n    },\n\n    /**\n     * If the `_attachLayer` method does not exist, the layer cannot be attached.\n     * This method is called to notify the developer of the problem by sending\n     * a message to the browser console.\n     *\n     * @param {String} errorMsg - A descriptive message for the error.\n     */\n    _failedToAttachLayer(errorMsg) {\n      if (console && (typeof console.log === 'function')) {\n        const errToPrint = errorMsg || '';\n        console.log('[PX-MAP-BEHAVIOR-LAYER] ERROR: The layer could not be attached.');\n        console.log(errToPrint);\n      }\n    }\n\n  };\n\n  const namespace = (window.PxMapBehavior = window.PxMapBehavior || {});\n  namespace.Layer = Layer;\n})()\n"]}