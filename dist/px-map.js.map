{"version":3,"sources":["px-map.es6.js"],"names":["PxMap","window","requestAnimationFrame","_drawMap","bind","fitToMarkers","listen","unlisten","mapInstance","fitFn","bounds","_getAllMarkerGeoms","length","fitBounds","debounce","eachLayer","layer","options","icon","markerGeom","getLatLng","indexOf","push","x","_drawX","parentElement","clientWidth","y","_drawY","clientHeight","mapDrawEl","Polymer","dom","root","querySelector","map","L","minZoom","maxZoom","scopeSubtree","$","_setMapInstance","_updateMapView","_fitMapToMakers","updateFn","setView","lat","lon","zoom","PxMapBehavior","DistributeProperties","type","Object","notify","readOnly","crs","String","value","Number","Array","Boolean","observer","flexToSize","reflectToAttribute"],"mappings":"wpBAAA,CAAC,UAAW,CACV,aADU,GAGJA,MAHI,sHA8KG,CACTC,OAAOC,qBAAP,CAA6B,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAA7B,EAEA,GAAI,KAAKC,YAAT,CAAuB,CACrB,KAAKC,MAAL,CAAY,IAAZ,CAAkB,mBAAlB,CAAuC,iBAAvC,CACD,CACF,CApLO,2CAsLG,CACT,GAAI,KAAKD,YAAT,CAAuB,CACrB,KAAKE,QAAL,CAAc,IAAd,CAAoB,mBAApB,CAAyC,iBAAzC,CACD,CACF,CA1LO,yDAqMU,gBAChB,GAAI,KAAKC,WAAL,EAAoB,KAAKH,YAA7B,CAA2C,CAEzC,GAAMI,OAAQ,QAARA,MAAQ,EAAM,CAClB,GAAMC,QAAS,MAAKC,kBAAL,EAAf,CACA,GAAID,OAAOE,MAAX,CAAmB,MAAKJ,WAAL,CAAiBK,SAAjB,CAA2BH,MAA3B,CACpB,CAHD,CAKA,KAAKI,QAAL,CAAc,oBAAd,CAAoCL,KAApC,CAA2C,CAA3C,CACD,CACF,CA/MO,+DAuNa,CACnB,GAAMC,QAAS,EAAf,CAGA,KAAKF,WAAL,CAAiBO,SAAjB,CAA2B,SAACC,KAAD,CAAW,CAEpC,GAAIA,MAAMC,OAAN,EAAiBD,MAAMC,OAAN,CAAcC,IAAnC,CAAyC,CACvC,GAAIC,YAAaH,MAAMI,SAAN,EAAjB,CACA,GAAIV,OAAOW,OAAP,CAAeF,UAAf,IAA+B,CAAC,CAApC,CAAuCT,OAAOY,IAAP,CAAYH,UAAZ,CACxC,CACF,CAND,EAQA,MAAOT,OACR,CApOO,2CA2OG,CACT,GAAMa,GAAI,KAAKC,MAAL,CAAc,KAAKC,aAAL,CAAmBC,WAA3C,CACA,GAAMC,GAAI,KAAKC,MAAL,CAAc,KAAKH,aAAL,CAAmBI,YAA3C,CAEA,GAAI,CAACN,CAAD,EAAM,CAACI,CAAX,CAAc,CACZ1B,OAAOC,qBAAP,CAA6B,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAA7B,EACA,MACD,CAGD,GAAI,CAAC,KAAKI,WAAV,CAAuB,CACrB,GAAMsB,WAAYC,QAAQC,GAAR,CAAY,KAAKC,IAAjB,EAAuBC,aAAvB,CAAqC,MAArC,CAAlB,CACA,GAAIC,KAAMC,EAAED,GAAF,CAAML,SAAN,CAAiB,CACzBO,QAAS,KAAKA,OADW,CAEzBC,QAAS,KAAKA,OAFW,CAAjB,CAAV,CAWA,KAAKC,YAAL,CAAkB,KAAKC,CAAL,CAAOL,GAAzB,CAA8B,IAA9B,EAGA,KAAKM,eAAL,CAAqBN,GAArB,CACD,CASD,KAAKO,cAAL,GAGA,KAAKC,eAAL,EAkCD,CApTO,uDA0TS,iBACf,GAAI,KAAKnC,WAAT,CAAsB,CACpB,GAAIoC,UAAW,QAAXA,SAAW,EAAM,CAAE,OAAKpC,WAAL,CAAiBqC,OAAjB,CAAyB,CAAC,OAAKC,GAAN,CAAW,OAAKC,GAAhB,CAAzB,CAA+C,OAAKC,IAApD,CAA2D,CAAlF,CACA,KAAKlC,QAAL,CAAc,iBAAd,CAAiC8B,QAAjC,CAA2C,CAA3C,CACD,CACF,CA/TO,8BAKC,CAAE,MAAO,QAAW,CALrB,qCAQQ,CAAE,MAAO,CAAC3C,OAAOgD,aAAP,CAAqBC,oBAAtB,CAA8C,CAR/D,yCAWY,CAAE,MAAO,CAAC,+BAAD,CAAoC,CAXzD,sCAcS,CACf,MAAO,CA4BL1C,YAAa,CACX2C,KAAMC,MADK,CAEXC,OAAQ,IAFG,CAGXC,SAAU,IAHC,CA5BR,CA4CLC,IAAK,CACHJ,KAAMK,MADH,CAEHC,MAAO,gBAFJ,CAGHJ,OAAQ,IAHL,CA5CA,CAyDLP,IAAK,CACHK,KAAMO,MADH,CAEHD,MAAO,UAFJ,CAGHJ,OAAQ,IAHL,CAzDA,CAsELN,IAAK,CACHI,KAAMO,MADH,CAEHD,MAAO,CAAC,WAFL,CAGHJ,OAAQ,IAHL,CAtEA,CAmFLL,KAAM,CACJG,KAAMO,MADF,CAEJD,MAAO,EAFH,CAGJJ,OAAQ,IAHJ,CAnFD,CA+FLf,QAAS,CACPa,KAAMO,MADC,CA/FJ,CAyGLrB,QAAS,CACPc,KAAMO,MADC,CAzGJ,CAwHLhD,OAAQ,CACNyC,KAAMQ,KADA,CAxHH,CAsILtD,aAAc,CACZ8C,KAAMS,OADM,CAEZH,MAAO,KAFK,CAGZI,SAAU,iBAHE,CAtIT,CAuJLC,WAAY,CACVX,KAAMS,OADI,CAEVG,mBAAoB,IAFV,CAGVN,MAAO,KAHG,CAvJP,CA6JR,CA5KO,oBAoUV1B,QAAQ/B,KAAR,CACD,CArUD","file":"px-map.js","sourcesContent":["(function() {\n  'use strict';\n\n  class PxMap {\n    /* Name for the component */\n    get is() { return 'px-map'; }\n\n    /* Behaviors to import for this component */\n    get behaviors() { return [window.PxMapBehavior.DistributeProperties]; }\n\n    /* Properties to attach to distributed light DOM children */\n    get distributions() { return ['mapInstance as parentInstance']; }\n\n    /* Properties for this component */\n    get properties() {\n      return {\n        /**\n         * The active map instance. Currently, the only mapping base library offered\n         * is Leaflet, so this will be a reference to the `L.map` that is displaying\n         * all the relevant map data.\n         *\n         * This is exposed as a framework-level building block to allow binding of the\n         * map instance to other elements that call methods on it. Do not call methods\n         * directly on the map instance. Use the web component APIs provided by\n         * `px-map` and its subcomponents to manipulate the map. If you call methods\n         * directly on this instance, your data model may become out-of-sync.\n         *\n         * This map instance will need to be passed down to subcomponents so they\n         * can draw themselves on the map. Use declarative data binding to pass it.\n         * For example:\n         *\n         * ```\n         * <px-map map-instance=\"{{map}}\">\n         *   <px-map-overlay-layer map-instance=\"{{map}}\"></px-map-overlay-layer>\n         * </px-map>\n         * ```\n         *\n         * You can also use the `DistributeProperties` behavior to automatically\n         * distribute the map instance to all light DOM children as they are added,\n         * and keep the map instance up-to-date.\n         *\n         * @type {Object}\n         */\n        mapInstance: {\n          type: Object,\n          notify: true,\n          readOnly: true\n        },\n\n        // ---------------------------------------------------------------------\n        // CONFIGURES THE VIEW SETTINGS FOR THE ACTIVE MAP\n        // ---------------------------------------------------------------------\n\n        /**\n         * The Coordinate Reference System to use when drawing the map. Leave the\n         * default if you're not sure what this means.\n         *\n         * @type {String}\n         */\n        crs: {\n          type: String,\n          value: 'L.CRS.EPSG3857',\n          notify: true\n        },\n\n        /**\n         * The latitude of the active map center. Can be used to set or update\n         * the center of the map, or read from after the user moves the map to\n         * get updated coordinates.\n         *\n         * @type {Number}\n         */\n        lat: {\n          type: Number,\n          value: 37.7672375,\n          notify: true\n        },\n\n        /**\n         * The longitude of the active map center. Can be used to set or update\n         * the center of the map, or read from after the user moves the map to\n         * get updated coordinates.\n         *\n         * @type {Number}\n         */\n        lon: {\n          type: Number,\n          value: -121.9584131,\n          notify: true\n        },\n\n        /**\n         * The zoom level of the active map. Can be used to set or update\n         * the zoom level of the map, or read from after the user changes the\n         * map zoom level to an updated value.\n         *\n         * @type {Number}\n         */\n        zoom: {\n          type: Number,\n          value: 10,\n          notify: true\n        },\n\n        /**\n         * The maximum zoom level for the active map. Will be applied to all\n         * layers of the map.\n         *\n         * @type {Number}\n         */\n        maxZoom: {\n          type: Number,\n        },\n\n        /**\n         * The minimum zoom level for the active map. Will be applied to all\n         * layers of the map.\n         *\n         * @type {Number}\n         */\n        minZoom: {\n          type: Number,\n        },\n\n        /**\n         * Restricts the view of the map to a given geographical boundary. The\n         * user will be bounced back if they attempt to pan outside the view.\n         * Disabled by default, letting the user pan to any point on the map.\n         *\n         * Pass an array of `<LatLng>` values like the following:\n         *\n         *        [40.712, -74.227], [40.774, -74.125]\n         *\n         * @type {Array}\n         */\n        bounds: {\n          type: Array\n        },\n\n        // ---------------------------------------------------------------------\n        // ENABLES FEATURES THAT CHANGE THE MAP BEHAVIOR\n        // ---------------------------------------------------------------------\n\n        /**\n         * Automatically changes the visible bounds of the map to fit all\n         * markers placed on it.\n         *\n         * @type {Object}\n         */\n        fitToMarkers: {\n          type: Boolean,\n          value: false,\n          observer: '_fitMapToMakers'\n        },\n\n        // ---------------------------------------------------------------------\n        // TELL THE MAP HOW TO RESIZE\n        // ---------------------------------------------------------------------\n\n        /**\n         * Uses flexbox to set the size of the map. Set the parent container\n         * to use `display: flex;` in your CSS and the map will automatically\n         * fill the container's available height and width.\n         *\n         * @type {Boolean}\n         */\n        flexToSize: {\n          type: Boolean,\n          reflectToAttribute: true,\n          value: false\n        }\n      }\n    }\n\n    attached() {\n      window.requestAnimationFrame(this._drawMap.bind(this));\n\n      if (this.fitToMarkers) {\n        this.listen(this, 'px-map-marker-add', '_fitMapToMakers');\n      }\n    }\n\n    detached() {\n      if (this.fitToMarkers) {\n        this.unlisten(this, 'px-map-marker-add', '_fitMapToMakers');\n      }\n    }\n\n    /**\n     * If the map is configured to fit itself to markers, iterates over all\n     * layers to find marker and ensures they fit in the view.\n     *\n     * This functio will be called when:\n     * 1. The `fitToMarkers` property is defined\n     * 2. Any marker fires a 'px-map-marker-add' event that bubbles up to the map\n     * 3. The map is first drawn\n     */\n    _fitMapToMakers() {\n      if (this.mapInstance && this.fitToMarkers) {\n\n        const fitFn = () => {\n          const bounds = this._getAllMarkerGeoms();\n          if (bounds.length) this.mapInstance.fitBounds(bounds);\n        };\n\n        this.debounce('fit-map-to-markers', fitFn, 1);\n      }\n    }\n\n    /**\n     * Iterates over all markers attached to the map and returns an array of\n     * <L.LatLng> instances with the geometry.\n     *\n     * @return {Array}\n     */\n    _getAllMarkerGeoms() {\n      const bounds = [];\n\n      // Loop over the layers\n      this.mapInstance.eachLayer((layer) => {\n        // Markers have a `layer.options.icon` set\n        if (layer.options && layer.options.icon) {\n          let markerGeom = layer.getLatLng();\n          if (bounds.indexOf(markerGeom) === -1) bounds.push(markerGeom);\n        }\n      });\n\n      return bounds;\n    }\n\n    /**\n     * Attemps to draw the map, if it hasn't already been drawn. If the parent\n     * has no height, throws it back into the stack to draw on the next\n     * animation frame.\n     */\n    _drawMap() {\n      const x = this._drawX = this.parentElement.clientWidth;\n      const y = this._drawY = this.parentElement.clientHeight;\n\n      if (!x || !y) {\n        window.requestAnimationFrame(this._drawMap.bind(this));\n        return;\n      }\n\n      // Try to find an initialized map instance. If there is none, create it.\n      if (!this.mapInstance) {\n        const mapDrawEl = Polymer.dom(this.root).querySelector('#map');\n        let map = L.map(mapDrawEl, {\n          minZoom: this.minZoom,\n          maxZoom: this.maxZoom\n        });\n\n        // @TODO: This is a shim for browsers without shadow DOM. We need to\n        // re-append the `#map` element or it won't get the 'style-scope' CSS\n        // classes needed to style it or its children. That's bad. When the\n        // polyfill is updated or support is cut for browsers without shadow\n        // DOM, this should be removed.\n        // Polymer.dom(this.root).appendChild(mapDrawEl);\n        this.scopeSubtree(this.$.map, true);\n\n        // Attach to the read-only `mapInstance`\n        this._setMapInstance(map);\n      }\n\n      // Ensure a tile layer is applied to the map\n      // L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      //   attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors, <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery &copy; <a href=\"http://mapbox.com\">Mapbox</a>',\n      //   maxZoom: 18\n      // }).addTo(this.mapInstance);\n\n      // Set the view from current defaults\n      this._updateMapView();\n\n      // Try to fit to map markers if the `fitToMarkers` attribute was set\n      this._fitMapToMakers();\n\n      // TEMPORARY MARKER TEST\n      // var newMarker = L.marker([this.lat, this.lon]).addTo(this.mapInstance);\n\n\n      // TEMPORARY CONTROLBOX TEST\n      // let controlHTML =\n      // `\n      // <div class=\"px-map-data-box-control\">\n      //   <div class=\"data-box\">\n      //     <div class=\"data-box__header\">\n      //       <h3 class=\"data-box__header__text\">Dispatch Hub: San Ramon</h3>\n      //     </div>\n      //     <div class=\"data-box__table\">\n      //       <div class=\"data-box__table__cell\"><p>Description</p></div>\n      //       <div class=\"data-box__table__cell\"><p>NSS 177 ROAD</p></div>\n      //\n      //       <div class=\"data-box__table__cell\"><p>Milepost</p></div>\n      //       <div class=\"data-box__table__cell\"><p>50</p></div>\n      //\n      //       <div class=\"data-box__table__cell\"><p>DIV/SUB</p></div>\n      //       <div class=\"data-box__table__cell\"><p>Bakersfield, CA</p></div>\n      //\n      //       <div class=\"data-box__table__cell\"><p>Next Test</p></div>\n      //       <div class=\"data-box__table__cell\"><p>9/12/16</p></div>\n      //     </div>\n      //   </div>\n      // </div>\n      // `;\n      // var controlBox = L.Control.controlBox({ position: 'topright', content: controlHTML });\n      // controlBox.addTo(this.mapInstance);\n      // this.controlBox = controlBox;\n      //\n    }\n\n    /**\n     * Called when the `lat`, `lon`, or `zoom` is set or updated. Sets the active\n     * map center to the new values.\n     */\n    _updateMapView() {\n      if (this.mapInstance) {\n        let updateFn = () => { this.mapInstance.setView([this.lat, this.lon], this.zoom) };\n        this.debounce('update-map-view', updateFn, 1);\n      }\n    }\n\n  }\n\n  /* Register this element with the Polymer constructor */\n  Polymer(PxMap);\n})()\n"]}