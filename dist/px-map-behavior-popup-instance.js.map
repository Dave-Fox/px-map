{"version":3,"sources":["px-map-behavior-popup-instance.es6.js"],"names":["PopupInstance","properties","active","type","Boolean","value","readOnly","parentInstance","Object","notify","bindToControl","String","observers","ready","instance","_createElementInstance","_setElementInstance","attached","_attachToParentInstance","detached","_detachFromParentInstance","popup","_createPopupInstance","L","_bindPopupInstanceEvents","length","getPopup","elementInstance","bindPopup","_unbindPopupInstanceEvents","removeLayer","_boundPopupEvents","popupopen","_handlePopupOpen","bind","popupclose","_handlePopupClose","click","_handlePopupParentClick","on","off","evt","_map","target","_boundPopupMapEvents","_handlePopupMapClick","fire","content","getContent","control","stopPropagation","namespace","window","PxMapBehavior"],"mappings":"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","file":"px-map-behavior-popup-instance.js","sourcesContent":["(function() {\n  'use strict';\n\n  /**\n   *\n   * @polymerBehavior PxMapBehavior.PopupInstance\n   */\n  const PopupInstance = {\n    properties: {\n      /**\n       * Set to `true` when the popup becomes visible.\n       */\n      active: {\n        type: Boolean,\n        value: false,\n        readOnly: true\n      },\n\n      /**\n       * A reference to the parent instance that this component will bind\n       * itself to when drawn on the map.\n       */\n      parentInstance: {\n        type: Object,\n        notify: true\n      },\n\n      /**\n       * The name of a control or another element on the map that will handle\n       * this popup's content. If this attribute is provided, the popup will\n       * not open as box with a pointer over its parent when the parent is\n       * clicked. The popup will fire an event that should be captured above\n       * with its content to place into a control.\n       */\n      bindToControl: {\n        type: String\n      }\n    },\n\n    observers: ['_attachToParentInstance(parentInstance)'],\n\n\n    ready() {\n      // The `_createElementInstance` method should be defined in a component\n      // or behavior that extends this behavior\n      let instance = this._createElementInstance();\n      this._setElementInstance(instance);\n    },\n\n    attached() {\n      this._attachToParentInstance();\n    },\n\n    detached() {\n      this._detachFromParentInstance();\n    },\n\n    _createElementInstance() {\n      const popup = this._createPopupInstance();\n      return popup;\n    },\n\n    // Overwrite this method in the component/behavior that extends this behavior\n    // Just creates a default thing\n    _createPopupInstance() {\n      return L.popup();\n    },\n\n    _attachToParentInstance() {\n      if (!this.parentInstance) return;\n\n      // Capture the `popupopen` and `popupclose` events from the parent instance\n      // These should be torn down on `detached`\n      this._bindPopupInstanceEvents();\n\n      // On parent click, fire an event that will be caught by a named control\n      if (this.bindToControl && this.bindToControl.length) {\n        // this._notifyControlOnClick();\n        return;\n      }\n\n      // On parent click, open a popup hovering over the parent\n      if (this.parentInstance.getPopup() !== this.elementInstance) {\n        this.parentInstance.bindPopup(this.elementInstance);\n      }\n    },\n\n    _detachFromParentInstance() {\n      if (!this.parentInstance) return;\n\n      this._unbindPopupInstanceEvents();\n\n      if (this.parentInstance.getPopup() === this.elementInstance) {\n        this.parentInstance.removeLayer(this.elementInstance);\n      }\n    },\n\n    _bindPopupInstanceEvents() {\n      if (!this.parentInstance) return;\n\n      this._boundPopupEvents = this._boundPopupEvents || {};\n\n      // Handle popupopen/popupclose events\n      if (!this._boundPopupEvents.popupopen && (typeof this._handlePopupOpen === 'function')) {\n        this._boundPopupEvents.popupopen = this._handlePopupOpen.bind(this);\n      }\n      if (!this._boundPopupEvents.popupclose && (typeof this._handlePopupClose === 'function')) {\n        this._boundPopupEvents.popupclose = this._handlePopupClose.bind(this);\n      }\n\n      // If binding to control, watch parent for click and do own popup handling\n      if (!this._boundPopupEvents.click && this.bindToControl && this.bindToControl.length) {\n        this._boundPopupEvents.click = this._handlePopupParentClick.bind(this);\n      }\n\n      this.parentInstance.on(this._boundPopupEvents);\n    },\n\n    _unbindPopupInstanceEvents() {\n      if (!this.parentInstance) return;\n\n      if (typeof this._boundPopupEvents === 'object') {\n        this.parentInstance.off(this._boundPopupEvents);\n      }\n    },\n\n    _handlePopupParentClick(evt) {\n      if (this.bindToControl && this.bindToControl.length) {\n        // Bind a listener to the map, to close the popup later\n        this._map = evt.target._map;\n        this._boundPopupMapEvents = { click: this._handlePopupMapClick.bind(this) };\n        this._map.on(this._boundPopupMapEvents);\n\n        this.fire('px-map-info-control-bind', {\n          content: this.elementInstance.getContent(),\n          control: this.bindToControl,\n          popup: this.elementInstance\n        });\n\n        evt.stopPropagation();\n      }\n    },\n\n    _handlePopupMapClick(evt) {\n      if (this.bindToControl && this.bindToControl.length) {\n        this.fire('px-map-info-control-unbind', {\n          content: '',\n          control: this.bindToControl\n        });\n      }\n\n      this._map.off(this._boundPopupMapEvents);\n    }\n  };\n\n  const namespace = (window.PxMapBehavior = window.PxMapBehavior || {});\n  namespace.PopupInstance = PopupInstance;\n})()\n"]}