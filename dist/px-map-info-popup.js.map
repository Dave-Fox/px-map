{"version":3,"sources":["px-map-info-popup.es6.js"],"names":["PxMapInfoPopup","window","requestAnimationFrame","_drawPopup","bind","__boundPopupUpdate","_updatePopupContent","Polymer","dom","root","observeNodes","unobserveNodes","popupInstance","popup","_createPopup","_setPopupInstance","markerInstance","_attachPopupToMarker","getPopup","bindPopup","_captureMarkerPopupEvents","content","innerHTML","trim","L","setContent","_capturePopupEvents","updateFn","newContent","existingContent","getContent","debounce","on","marker","evt","_setActive","fire","title","type","String","observer","description","active","Boolean","value","readOnly","Object","notify"],"mappings":"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","file":"px-map-info-popup.js","sourcesContent":["(function(){\n  'use strict';\n\n  class PxMapInfoPopup {\n    /* Name for the component */\n    get is() { return 'px-map-info-popup'; }\n\n    /* Properties for this component */\n    get properties() {\n      return {\n        /**\n         * Title text to display in bold at the top of the popup. Should be kept\n         * relatively short (25 characters or less) to keep the popup from\n         * growing too large.\n         *\n         * @type {String}\n         */\n        title: {\n          type: String,\n          observer: '_updatePopupContent'\n        },\n\n        /**\n         * Description text to place in the body of the popup. Try to keep the\n         * description to a reasonable size to keep the popup from growing\n         * too large.\n         *\n         * To display more information, bind to the popup's\n         * `active` property for notifications on when this popup is shown\n         * and display additional information in the UI of your app.\n         *\n         * @type {Object}\n         */\n        description: {\n          type: String,\n          observer: '_updatePopupContent'\n        },\n\n        /**\n         * When the popup is activated and becomes visible, set to `true`.\n         */\n        active: {\n          type: Boolean,\n          value: false,\n          readOnly: true\n        },\n\n        /**\n         * The popup instance created by this component and attached to the\n         * UI layer forwarded from above. Used to create and attach a popup\n         * instance that can be shown or hidden to map items.\n         *\n         * @type {Object}\n         */\n         popupInstance: {\n           type: Object,\n           notify: true,\n           readOnly: true\n         },\n\n         /**\n          * A reference to the marker instance passed down from a parent\n          * `px-map-*-marker` component. If set, this component will attach\n          * itself to the marker.\n          *\n          * @type {Object}\n          */\n        markerInstance: {\n          type: Object,\n          notify: true,\n          observer: '_drawPopup'\n        }\n      }\n    }\n\n    attached() {\n      window.requestAnimationFrame(this._drawPopup.bind(this));\n\n      this.__boundPopupUpdate = this._updatePopupContent.bind(this);\n      Polymer.dom(this.root).observeNodes(this.__boundPopupUpdate);\n    }\n\n    detached() {\n      Polymer.dom(this.root).unobserveNodes(this.__boundPopupUpdate);\n    }\n\n    /**\n     * Attempts to create the popup so it can be attached and shown when requested.\n     */\n    _drawPopup() {\n      if (!this.popupInstance) {\n        const popup = this._createPopup();\n        this._setPopupInstance(popup);\n      }\n      if (this.markerInstance) {\n        this._attachPopupToMarker();\n      }\n    }\n\n    /**\n     * Binds the popup to a marker. The popup will be shown when the marker is\n     * clicked. It will be hidden when the user clicks elsewhere on the map,\n     * when the user clicks another marker, or when the user closes the popup.\n     *\n     * @param {Object} marker - An <L.Marker> instance to bind to\n     */\n    _attachPopupToMarker() {\n      if (this.popupInstance && this.markerInstance && this.markerInstance.getPopup && this.markerInstance.getPopup() !== this.popupInstance) {\n        this.markerInstance.bindPopup(this.popupInstance);\n        // Capture the `popupopen` and `popupclose` events from the marker instance\n        this._captureMarkerPopupEvents(this.markerInstance);\n      }\n    }\n\n    /**\n     * Creates and returns a new popup instance with context sourced from the\n     * component's shadow root.\n     *\n     * @return {Object}\n     */\n    _createPopup() {\n      const content = Polymer.dom(this.root).innerHTML.trim();\n      const popup = L.popup().setContent(content);\n\n      // Attach event handlers to the popup\n      this._capturePopupEvents(popup);\n\n      // Return the popup instance to be attached\n      return popup;\n    }\n\n    /**\n     * If there is an active popupInstance, attempts to update its content.\n     */\n    _updatePopupContent() {\n      if (this.popupInstance) {\n        const updateFn = () => {\n          const newContent = Polymer.dom(this.root).innerHTML.trim();\n          const existingContent = this.popupInstance.getContent();\n          if (newContent !== existingContent) {\n            this.popupInstance.setContent(newContent);\n          }\n        }\n\n        this.debounce('update-popup-content', updateFn, 1);\n      }\n    }\n\n    /**\n     * Configures handler functions to capture, react to, or forward events\n     * from a popup instance.\n     *\n     * @param {Object} popup\n     */\n    _capturePopupEvents(popup) {\n      popup.on('popupopen', ()=> { debugger; }, this);\n    }\n\n    /**\n     * Attaches a listener to the parent marker instance's `popupopen` and\n     * `popupclose` events to keep the popup's state in sync with its\n     * notifying `active` attribute.\n     *\n     * @param {Object} marker\n     */\n    _captureMarkerPopupEvents(marker) {\n      marker.on('popupopen', (evt) => {\n        this._setActive(true);\n        this.fire('px-map-popup-open', { popup: this.popupInstance, marker: this.markerInstance });\n      }, this);\n      marker.on('popupclose', (evt) => {\n        this._setActive(false);\n        this.fire('px-map-popup-close', { popup: this.popupInstance, marker: this.markerInstance });\n      }, this);\n    }\n  }\n\n  /* Register this element with the Polymer constructor. */\n  Polymer(PxMapInfoPopup);\n})()\n"]}