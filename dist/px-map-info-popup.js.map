{"version":3,"sources":["px-map-info-popup.es6.js"],"names":["PxMapInfoPopup","_createPopup","_bindPopupToParent","__boundPopupUpdate","_updatePopupContent","bind","Polymer","dom","root","observeNodes","unobserveNodes","popupInstance","content","_getPopupContent","popup","L","className","setContent","_setPopupInstance","parentInstance","getPopup","_capturePopupEventsFromParent","bindPopup","parent","on","evt","_setActive","fire","layerInstance","innerHTML","trim","updateFn","newContent","existingContent","getContent","debounce","title","type","String","observer","description","imgSrc","active","Boolean","value","readOnly","Object","notify"],"mappings":"wpBAAA,CAAC,UAAU,CACT,aADS,GAGHA,eAHG,iJAmFI,CACT,KAAKC,YAAL,GACA,KAAKC,kBAAL,GAEA,KAAKC,kBAAL,CAA0B,KAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAA1B,CACAC,QAAQC,GAAR,CAAY,KAAKC,IAAjB,EAAuBC,YAAvB,CAAoC,KAAKN,kBAAzC,CACD,CAzFM,2CA2FI,CACTG,QAAQC,GAAR,CAAY,KAAKC,IAAjB,EAAuBE,cAAvB,CAAsC,KAAKP,kBAA3C,CACD,CA7FM,mDAqGQ,CACb,GAAI,CAAC,KAAKQ,aAAV,CAAyB,CACvB,GAAMC,SAAU,KAAKC,gBAAL,EAAhB,CACA,GAAMC,OAAQC,EAAED,KAAF,CAAQ,CAAEE,UAAW,mBAAb,CAAR,EAA4CC,UAA5C,CAAuDL,OAAvD,CAAd,CACA,KAAKM,iBAAL,CAAuBJ,KAAvB,CACD,CACF,CA3GM,+DAuHc,CACnB,GAAI,KAAKH,aAAL,EAAsB,KAAKQ,cAA3B,EAA6C,KAAKA,cAAL,CAAoBC,QAAjE,EAA6E,KAAKD,cAAL,CAAoBC,QAApB,KAAmC,KAAKT,aAAzH,CAAwI,CAGtI,KAAKU,6BAAL,CAAmC,KAAKF,cAAxC,EAEA,KAAKA,cAAL,CAAoBG,SAApB,CAA8B,KAAKX,aAAnC,CACD,CACF,CA/HM,oFA6IuBY,MA7IvB,CA6I+B,gBACpCA,OAAOC,EAAP,CAAU,WAAV,CAAuB,SAACC,GAAD,CAAS,CAC9B,MAAKC,UAAL,CAAgB,IAAhB,EACA,MAAKC,IAAL,CAAU,mBAAV,CAA+B,CAAEb,MAAO,MAAKc,aAAd,CAA6BL,OAAQ,MAAKJ,cAA1C,CAA/B,CACD,CAHD,CAGG,IAHH,EAIAI,OAAOC,EAAP,CAAU,YAAV,CAAwB,SAACC,GAAD,CAAS,CAC/B,MAAKC,UAAL,CAAgB,KAAhB,EACA,MAAKC,IAAL,CAAU,oBAAV,CAAgC,CAAEb,MAAO,MAAKc,aAAd,CAA6BL,OAAQ,MAAKJ,cAA1C,CAAhC,CACD,CAHD,CAGG,IAHH,CAID,CAtJM,2DA8JY,CACjB,MAAOb,SAAQC,GAAR,CAAY,KAAKC,IAAjB,EAAuBqB,SAAvB,CAAiCC,IAAjC,EACR,CAhKM,iEAyKe,iBACpB,GAAI,KAAKnB,aAAT,CAAwB,CACtB,GAAMoB,UAAW,QAAXA,SAAW,EAAM,CACrB,GAAMC,YAAa,OAAKnB,gBAAL,EAAnB,CACA,GAAMoB,iBAAkB,OAAKtB,aAAL,CAAmBuB,UAAnB,EAAxB,CACA,GAAIF,aAAeC,eAAnB,CAAoC,CAClC,OAAKtB,aAAL,CAAmBM,UAAnB,CAA8Be,UAA9B,CACD,CACF,CAND,CAQA,KAAKG,QAAL,CAAc,sBAAd,CAAsCJ,QAAtC,CAAgD,CAAhD,CACD,CACF,CArLM,8BAKE,CAAE,MAAO,mBAAsB,CALjC,sCAQU,CACf,MAAO,CAQLK,MAAO,CACLC,KAAMC,MADD,CAELC,SAAU,qBAFL,CARF,CAwBLC,YAAa,CACXH,KAAMC,MADK,CAEXC,SAAU,qBAFC,CAxBR,CAmCLE,OAAQ,CACNJ,KAAMC,MADA,CAENC,SAAU,qBAFJ,CAnCH,CA2CLG,OAAQ,CACNL,KAAMM,OADA,CAENC,MAAO,KAFD,CAGNC,SAAU,IAHJ,CA3CH,CAwDJlC,cAAe,CACb0B,KAAMS,MADO,CAEbC,OAAQ,IAFK,CAGbF,SAAU,IAHG,CAxDX,CAkEJ1B,eAAgB,CACdkB,KAAMS,MADQ,CAEdC,OAAQ,IAFM,CAGdR,SAAU,oBAHI,CAlEZ,CAwER,CAjFM,6BA0LTjC,QAAQN,cAAR,CACD,CA3LD","file":"px-map-info-popup.js","sourcesContent":["(function(){\n  'use strict';\n\n  class PxMapInfoPopup {\n    /* Name for the component */\n    get is() { return 'px-map-info-popup'; }\n\n    /* Properties for this component */\n    get properties() {\n      return {\n        /**\n         * Title text to display in bold at the top of the popup. Should be kept\n         * relatively short (25 characters or less) to keep the popup from\n         * growing too large.\n         *\n         * @type {String}\n         */\n        title: {\n          type: String,\n          observer: '_updatePopupContent'\n        },\n\n        /**\n         * Description text to place in the body of the popup. Try to keep the\n         * description to a reasonable size to keep the popup from growing\n         * too large.\n         *\n         * To display more information, bind to the popup's\n         * `active` property for notifications on when this popup is shown\n         * and display additional information in the UI of your app.\n         *\n         * @type {String}\n         */\n        description: {\n          type: String,\n          observer: '_updatePopupContent'\n        },\n\n        /**\n         * The URL for an image to place inside the popup. Use a small, square\n         * thumbnail-style image (e.g. 75px by 75px).\n         *\n         * @type {String}\n         */\n        imgSrc: {\n          type: String,\n          observer: '_updatePopupContent'\n        },\n\n        /**\n         * When the popup is activated and becomes visible, set to `true`.\n         */\n        active: {\n          type: Boolean,\n          value: false,\n          readOnly: true\n        },\n\n        /**\n         * The popup instance created by this component and attached to the\n         * UI layer forwarded from above. Used to create and attach a popup\n         * instance that can be shown or hidden to map items.\n         *\n         * @type {Object}\n         */\n         popupInstance: {\n           type: Object,\n           notify: true,\n           readOnly: true\n         },\n\n         /**\n          * A reference to the parent instance that this component will bind\n          * itself to when drawn on the map.\n          */\n         parentInstance: {\n           type: Object,\n           notify: true,\n           observer: '_bindPopupToParent'\n         }\n      }\n    }\n\n    attached() {\n      this._createPopup();\n      this._bindPopupToParent();\n\n      this.__boundPopupUpdate = this._updatePopupContent.bind(this);\n      Polymer.dom(this.root).observeNodes(this.__boundPopupUpdate);\n    }\n\n    detached() {\n      Polymer.dom(this.root).unobserveNodes(this.__boundPopupUpdate);\n    }\n\n    /**\n     * If no popup instance has been created, creates a new popup instance\n     * with content sourced from the component's DOM.\n     *\n     * @return {L.Popup}\n     */\n    _createPopup() {\n      if (!this.popupInstance) {\n        const content = this._getPopupContent();\n        const popup = L.popup({ className: 'px-map-info-popup' }).setContent(content);\n        this._setPopupInstance(popup);\n      }\n    }\n\n    /**\n     * Binds the popup to a parent. The popup will be shown when the parent is\n     * clicked. It will be hidden when the user clicks elsewhere on the map,\n     * when the user clicks another item with a bound popup, or when the user\n     * taps the button that closes the popup.\n     *\n     * Also captures the parent's popup events to handle.\n     *\n     * @param {L.Layer} parent\n     */\n    _bindPopupToParent() {\n      if (this.popupInstance && this.parentInstance && this.parentInstance.getPopup && this.parentInstance.getPopup() !== this.popupInstance) {\n        // Capture the `popupopen` and `popupclose` events from the parent instance\n        // These should be torn down on `detached`\n        this._capturePopupEventsFromParent(this.parentInstance);\n        // Bind the popup to parent\n        this.parentInstance.bindPopup(this.popupInstance);\n      }\n    }\n\n    /**\n     * Attaches a listener to the parent marker instance's `popupopen` and\n     * `popupclose` events to keep the popup's state in sync with its\n     * notifying `active` attribute.\n     *\n     * Unfortunately, these events can't be captured inside the popup, or we\n     * wouldn't try to bind to a potentially unknown parent. It shouldn't cause\n     * any issues unless the popup has an invalid parent (i.e. a parent without\n     * a `bindPopup()` method).\n     *\n     * @param {L.Layer} parent\n     */\n    _capturePopupEventsFromParent(parent) {\n      parent.on('popupopen', (evt) => {\n        this._setActive(true);\n        this.fire('px-map-popup-open', { popup: this.layerInstance, parent: this.parentInstance });\n      }, this);\n      parent.on('popupclose', (evt) => {\n        this._setActive(false);\n        this.fire('px-map-popup-close', { popup: this.layerInstance, parent: this.parentInstance });\n      }, this);\n    }\n\n    /**\n     * Retrieves popup content from the light DOM and cleans it up preparing\n     * for insertion into the popup instnace.\n     *\n     * @return {String} Stringified HTML\n     */\n    _getPopupContent() {\n      return Polymer.dom(this.root).innerHTML.trim();\n    }\n\n    /**\n     * When the popup's DOM is updated, ensure those changes are synced to the\n     * popup instance (which does not directly share this DOM, but just\n     * implements its HTML.)\n     *\n     * Debounced to ensure an update is only triggered once every millisecond.\n     */\n    _updatePopupContent() {\n      if (this.popupInstance) {\n        const updateFn = () => {\n          const newContent = this._getPopupContent();\n          const existingContent = this.popupInstance.getContent();\n          if (newContent !== existingContent) {\n            this.popupInstance.setContent(newContent);\n          }\n        }\n\n        this.debounce('update-popup-content', updateFn, 1);\n      }\n    }\n\n  }\n\n  /* Register this component with the Polymer constructor. */\n  Polymer(PxMapInfoPopup);\n})()\n"]}