{"version":3,"sources":["px-map-info-popup.es6.js"],"names":["PxMapInfoPopup","__boundPopupUpdate","_updateInfoPopupContent","bind","Polymer","dom","root","observeNodes","unobserveNodes","options","_getInfoPopupOptions","className","content","_getInfoPopupContent","L","popup","setContent","defaults","innerHTML","trim","elementInstance","updateFn","newContent","existingContent","getContent","fire","debounce","ns","window","PxMapBehavior","ElementInstance","PopupInstance","title","type","String","observer","description","imgSrc","active","Boolean","value","readOnly"],"mappings":"wpBAAA,CAAC,UAAU,CACT,aADS,GAGHA,eAHG,iJAuEI,CACT,KAAKC,kBAAL,CAA0B,KAAKC,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CAA1B,CACAC,QAAQC,GAAR,CAAY,KAAKC,IAAjB,EAAuBC,YAAvB,CAAoC,KAAKN,kBAAzC,CACD,CA1EM,2CA4EI,CACTG,QAAQC,GAAR,CAAY,KAAKC,IAAjB,EAAuBE,cAAvB,CAAsC,KAAKP,kBAA3C,CACD,CA9EM,mEAgFgB,CACrB,GAAMQ,SAAU,KAAKC,oBAAL,CAA0B,CAAEC,UAAW,gBAAb,CAA1B,CAAhB,CACA,GAAMC,SAAU,KAAKC,oBAAL,EAAhB,CACA,MAAOC,GAAEC,KAAF,CAAQN,OAAR,EAAiBO,UAAjB,CAA4BJ,OAA5B,CACR,CApFM,mEAsF2B,IAAbK,SAAa,2DAAJ,EAAI,CAChC,GAAMR,SAAUQ,QAAhB,CACA,MAAOR,QACR,CAzFM,mEAiGgB,CACrB,MAAOL,SAAQC,GAAR,CAAY,KAAKC,IAAjB,EAAuBY,SAAvB,CAAiCC,IAAjC,EACR,CAnGM,yEA4GmB,gBACxB,GAAI,KAAKC,eAAT,CAA0B,CACxB,GAAMC,UAAW,QAAXA,SAAW,EAAM,CACrB,GAAMC,YAAa,MAAKT,oBAAL,EAAnB,CACA,GAAMU,iBAAkB,MAAKH,eAAL,CAAqBI,UAArB,EAAxB,CACA,GAAIF,aAAeC,eAAnB,CAAoC,CAClC,MAAKH,eAAL,CAAqBJ,UAArB,CAAgCM,UAAhC,EACA,MAAKG,IAAL,CAAU,8BAAV,CAA0C,CACxCV,MAAO,MAAKK,eAD4B,CAExCR,QAASU,UAF+B,CAA1C,CAID,CACF,CAVD,CAYA,KAAKI,QAAL,CAAc,sBAAd,CAAsCL,QAAtC,CAAgD,CAAhD,CACD,CACF,CA5HM,8BAKE,CACP,MAAO,mBACR,CAPM,qCAUS,CACd,GAAMM,IAAKC,OAAOC,aAAlB,CACA,MAAO,CACLF,GAAGG,eADE,CAELH,GAAGI,aAFE,CAIR,CAhBM,sCAmBU,CACf,MAAO,CAQLC,MAAO,CACLC,KAAMC,MADD,CAELC,SAAU,yBAFL,CARF,CAwBLC,YAAa,CACXH,KAAMC,MADK,CAEXC,SAAU,yBAFC,CAxBR,CAmCLE,OAAQ,CACNJ,KAAMC,MADA,CAENC,SAAU,yBAFJ,CAnCH,CA2CLG,OAAQ,CACNL,KAAMM,OADA,CAENC,MAAO,KAFD,CAGNC,SAAU,IAHJ,CA3CH,CAiDR,CArEM,6BAiITrC,QAAQJ,cAAR,CACD,CAlID","file":"px-map-info-popup.js","sourcesContent":["(function(){\n  'use strict';\n\n  class PxMapInfoPopup {\n    /* Name for the component */\n    get is() {\n      return 'px-map-info-popup';\n    }\n\n    /* Behaviors to import for this component */\n    get behaviors() {\n      const ns = window.PxMapBehavior;\n      return [\n        ns.ElementInstance,\n        ns.PopupInstance\n      ];\n    }\n\n    /* Properties for this component */\n    get properties() {\n      return {\n        /**\n         * Title text to display in bold at the top of the popup. Should be kept\n         * relatively short (25 characters or less) to keep the popup from\n         * growing too large.\n         *\n         * @type {String}\n         */\n        title: {\n          type: String,\n          observer: '_updateInfoPopupContent'\n        },\n\n        /**\n         * Description text to place in the body of the popup. Try to keep the\n         * description to a reasonable size to keep the popup from growing\n         * too large.\n         *\n         * To display more information, bind to the popup's\n         * `active` property for notifications on when this popup is shown\n         * and display additional information in the UI of your app.\n         *\n         * @type {String}\n         */\n        description: {\n          type: String,\n          observer: '_updateInfoPopupContent'\n        },\n\n        /**\n         * The URL for an image to place inside the popup. Use a small, square\n         * thumbnail-style image (e.g. 75px by 75px).\n         *\n         * @type {String}\n         */\n        imgSrc: {\n          type: String,\n          observer: '_updateInfoPopupContent'\n        },\n\n        /**\n         * When the popup is activated and becomes visible, set to `true`.\n         */\n        active: {\n          type: Boolean,\n          value: false,\n          readOnly: true\n        }\n      }\n    }\n\n    attached() {\n      this.__boundPopupUpdate = this._updateInfoPopupContent.bind(this);\n      Polymer.dom(this.root).observeNodes(this.__boundPopupUpdate);\n    }\n\n    detached() {\n      Polymer.dom(this.root).unobserveNodes(this.__boundPopupUpdate);\n    }\n\n    _createPopupInstance() {\n      const options = this._getInfoPopupOptions({ className: 'map-info-popup' });\n      const content = this._getInfoPopupContent();\n      return L.popup(options).setContent(content);\n    }\n\n    _getInfoPopupOptions(defaults={}) {\n      const options = defaults;\n      return options;\n    }\n\n    /**\n     * Retrieves popup content from the light DOM and cleans it up preparing\n     * for insertion into the popup instnace.\n     *\n     * @return {String} Stringified HTML\n     */\n    _getInfoPopupContent() {\n      return Polymer.dom(this.root).innerHTML.trim();\n    }\n\n    /**\n     * When the popup's DOM is updated, ensure those changes are synced to the\n     * popup instance (which does not directly share this DOM, but just\n     * implements its HTML.)\n     *\n     * Debounced to ensure an update is only triggered once every millisecond.\n     */\n    _updateInfoPopupContent() {\n      if (this.elementInstance) {\n        const updateFn = () => {\n          const newContent = this._getInfoPopupContent();\n          const existingContent = this.elementInstance.getContent();\n          if (newContent !== existingContent) {\n            this.elementInstance.setContent(newContent);\n            this.fire('px-map-popup-content-changed', {\n              popup: this.elementInstance,\n              content: newContent\n            });\n          }\n        }\n\n        this.debounce('update-popup-content', updateFn, 1);\n      }\n    }\n\n  }\n\n  /* Register this component with the Polymer constructor. */\n  Polymer(PxMapInfoPopup);\n})()\n\n// (function(){\n//   'use strict';\n//\n//   class PxMapInfoPopup {\n//     /* Name for the component */\n//     get is() { return 'px-map-info-popup'; }\n//\n//     /* Properties for this component */\n//     get properties() {\n//       return {\n//         /**\n//          * Title text to display in bold at the top of the popup. Should be kept\n//          * relatively short (25 characters or less) to keep the popup from\n//          * growing too large.\n//          *\n//          * @type {String}\n//          */\n//         title: {\n//           type: String,\n//           observer: '_updateInfoPopupContent'\n//         },\n//\n//         /**\n//          * Description text to place in the body of the popup. Try to keep the\n//          * description to a reasonable size to keep the popup from growing\n//          * too large.\n//          *\n//          * To display more information, bind to the popup's\n//          * `active` property for notifications on when this popup is shown\n//          * and display additional information in the UI of your app.\n//          *\n//          * @type {String}\n//          */\n//         description: {\n//           type: String,\n//           observer: '_updateInfoPopupContent'\n//         },\n//\n//         /**\n//          * The URL for an image to place inside the popup. Use a small, square\n//          * thumbnail-style image (e.g. 75px by 75px).\n//          *\n//          * @type {String}\n//          */\n//         imgSrc: {\n//           type: String,\n//           observer: '_updateInfoPopupContent'\n//         },\n//\n//         /**\n//          * When the popup is activated and becomes visible, set to `true`.\n//          */\n//         active: {\n//           type: Boolean,\n//           value: false,\n//           readOnly: true\n//         },\n//\n//         /**\n//          * The popup instance created by this component and attached to the\n//          * UI layer forwarded from above. Used to create and attach a popup\n//          * instance that can be shown or hidden to map items.\n//          *\n//          * @type {Object}\n//          */\n//          popupInstance: {\n//            type: Object,\n//            notify: true,\n//            readOnly: true\n//          },\n//       }\n//     }\n//\n//     attached() {\n//       this._createPopup();\n//       this._bindPopupToParent();\n//\n//       this.__boundPopupUpdate = this._updateInfoPopupContent.bind(this);\n//       Polymer.dom(this.root).observeNodes(this.__boundPopupUpdate);\n//     }\n//\n//     detached() {\n//       Polymer.dom(this.root).unobserveNodes(this.__boundPopupUpdate);\n//     }\n//\n//     /**\n//      * If no popup instance has been created, creates a new popup instance\n//      * with content sourced from the component's DOM.\n//      *\n//      * @return {L.Popup}\n//      */\n//     _createPopup() {\n//       if (!this.popupInstance) {\n//         const content = this._getPopupContent();\n//         const popup = L.popup({ className: 'px-map-info-popup' }).setContent(content);\n//         this._setPopupInstance(popup);\n//       }\n//     }\n//\n//     /**\n//      * Binds the popup to a parent. The popup will be shown when the parent is\n//      * clicked. It will be hidden when the user clicks elsewhere on the map,\n//      * when the user clicks another item with a bound popup, or when the user\n//      * taps the button that closes the popup.\n//      *\n//      * Also captures the parent's popup events to handle.\n//      *\n//      * @param {L.Layer} parent\n//      */\n//     _bindPopupToParent() {\n//       if (this.popupInstance && this.parentInstance && this.parentInstance.getPopup && this.parentInstance.getPopup() !== this.popupInstance) {\n//         // Capture the `popupopen` and `popupclose` events from the parent instance\n//         // These should be torn down on `detached`\n//         this._capturePopupEventsFromParent(this.parentInstance);\n//         // Bind the popup to parent\n//         this.parentInstance.bindPopup(this.popupInstance);\n//       }\n//     }\n//\n//     /**\n//      * Attaches a listener to the parent marker instance's `popupopen` and\n//      * `popupclose` events to keep the popup's state in sync with its\n//      * notifying `active` attribute.\n//      *\n//      * Unfortunately, these events can't be captured inside the popup, or we\n//      * wouldn't try to bind to a potentially unknown parent. It shouldn't cause\n//      * any issues unless the popup has an invalid parent (i.e. a parent without\n//      * a `bindPopup()` method).\n//      *\n//      * @param {L.Layer} parent\n//      */\n//     _capturePopupEventsFromParent(parent) {\n//       parent.on('popupopen', (evt) => {\n//         this._setActive(true);\n//         this.fire('px-map-popup-open', { popup: this.layerInstance, parent: this.parentInstance });\n//       }, this);\n//       parent.on('popupclose', (evt) => {\n//         this._setActive(false);\n//         this.fire('px-map-popup-close', { popup: this.layerInstance, parent: this.parentInstance });\n//       }, this);\n//     }\n//\n//     /**\n//      * Retrieves popup content from the light DOM and cleans it up preparing\n//      * for insertion into the popup instnace.\n//      *\n//      * @return {String} Stringified HTML\n//      */\n//     _getPopupContent() {\n//       return Polymer.dom(this.root).innerHTML.trim();\n//     }\n//\n//     /**\n//      * When the popup's DOM is updated, ensure those changes are synced to the\n//      * popup instance (which does not directly share this DOM, but just\n//      * implements its HTML.)\n//      *\n//      * Debounced to ensure an update is only triggered once every millisecond.\n//      */\n//     _updateInfoPopupContent() {\n//       if (this.popupInstance) {\n//         const updateFn = () => {\n//           const newContent = this._getPopupContent();\n//           const existingContent = this.popupInstance.getContent();\n//           if (newContent !== existingContent) {\n//             this.popupInstance.setContent(newContent);\n//           }\n//         }\n//\n//         this.debounce('update-popup-content', updateFn, 1);\n//       }\n//     }\n//\n//   }\n//\n//   /* Register this component with the Polymer constructor. */\n//   Polymer(PxMapInfoPopup);\n// })()\n"]}