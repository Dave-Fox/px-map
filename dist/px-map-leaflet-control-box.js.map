{"version":3,"sources":["px-map-leaflet-control-box.es6.js"],"names":["L","Control","ControlBox","extend","options","position","content","className","autoOpen","initialize","setOptions","controlContainer","DomUtil","create","innerHTML","_isVisible","openBox","closeBox","DomEvent","disableScrollPropagation","onAdd","map","onRemove","setContent","stringifiedHTML","_content","_updateContent","getContainerElement","_containerElIsHidden","removeClass","addClass","isOpen","hasClass","controlBox"],"mappings":"aAQAA,EAAEC,OAAF,CAAUC,UAAV,CAAuBF,EAAEC,OAAF,CAAUE,MAAV,CAAiB,CACtCC,QAAS,CACPC,SAAU,UADH,CAEPC,QAAS,EAFF,CAGPC,UAAW,EAHJ,CAIPC,SAAU,IAJH,CAD6B,CAQtCC,WAAY,oBAASL,OAAT,CAAkB,CAE5BJ,EAAEU,UAAF,CAAa,IAAb,CAAmBN,OAAnB,EAGA,KAAKO,gBAAL,CAAwBX,EAAEY,OAAF,CAAUC,MAAV,CAAiB,KAAjB,CAAxB,CACA,KAAKF,gBAAL,CAAsBJ,SAAtB,CAAkC,KAAKH,OAAL,CAAaG,SAA/C,CACA,KAAKI,gBAAL,CAAsBG,SAAtB,CAAkC,KAAKV,OAAL,CAAaE,OAA/C,CAGA,KAAKS,UAAL,CAAkB,IAAlB,CACA,GAAI,KAAKX,OAAL,CAAaI,QAAjB,CAA2B,CACzB,KAAKQ,OAAL,EACD,CAFD,IAEO,CACL,KAAKC,QAAL,EACD,CAGDjB,EAAEkB,QAAF,CAAWC,wBAAX,CAAoC,KAAKR,gBAAzC,CACD,CA3BqC,CA6BtCS,MAAO,eAASC,GAAT,CAAc,CAGnB,MAAO,MAAKV,gBACb,CAjCqC,CAmCtCW,SAAU,kBAASD,GAAT,CAAc,CAEvB,CArCqC,CA4CtCE,WAAY,oBAASC,eAAT,CAA0B,CACpC,GAAI,KAAKb,gBAAT,CAA2B,CACzB,KAAKc,QAAL,CAAgBD,eAAhB,CACA,KAAKE,cAAL,EACD,CACF,CAjDqC,CAuDtCA,eAAgB,yBAAW,CACzB,GAAI,CAAC,KAAKD,QAAN,EAAkB,CAAC,KAAKd,gBAA5B,CAA8C,OAE9C,KAAKA,gBAAL,CAAsBG,SAAtB,CAAkC,KAAKW,QACxC,CA3DqC,CAmEtCE,oBAAqB,8BAAW,CAC9B,GAAI,CAAC,KAAKhB,gBAAV,CAA4B,MAAO,KAAP,CAC5B,MAAO,MAAKA,gBACb,CAtEqC,CA4EtCK,QAAS,kBAAW,CAClB,GAAI,CAAC,KAAKD,UAAN,EAAoB,KAAKJ,gBAAzB,EAA6C,KAAKiB,oBAAL,KAAgC,IAAjF,CAAuF,CACrF5B,EAAEY,OAAF,CAAUiB,WAAV,CAAsB,KAAKlB,gBAA3B,CAA6C,gBAA7C,CACD,CACD,KAAKI,UAAL,CAAkB,IACnB,CAjFqC,CAuFtCE,SAAU,mBAAW,CACnB,GAAI,KAAKF,UAAL,EAAmB,KAAKJ,gBAAxB,EAA4C,KAAKiB,oBAAL,KAAgC,KAAhF,CAAuF,CACrF5B,EAAEY,OAAF,CAAUkB,QAAV,CAAmB,KAAKnB,gBAAxB,CAA0C,gBAA1C,CACD,CACD,KAAKI,UAAL,CAAkB,KACnB,CA5FqC,CAmGtCgB,OAAQ,iBAAW,CACjB,GAAI,CAAC,KAAKpB,gBAAV,CAA4B,MAAO,KAAP,CAC5B,MAAO,MAAKI,UACb,CAtGqC,CAgHtCa,qBAAsB,+BAAW,CAC/B,GAAI,CAAC,KAAKjB,gBAAV,CAA4B,MAAO,KAAP,CAC5B,MAAOX,GAAEY,OAAF,CAAUoB,QAAV,CAAmB,KAAKrB,gBAAxB,CAA0C,gBAA1C,CACR,CAnHqC,CAAjB,CAAvB,CA+HAX,EAAEC,OAAF,CAAUgC,UAAV,CAAuB,SAAS7B,OAAT,CAAkB,CACvC,MAAO,IAAIJ,GAAEC,OAAF,CAAUC,UAAd,CAAyBE,OAAzB,CACR,CAFD","file":"px-map-leaflet-control-box.js","sourcesContent":["/**\n * Extends the `L.Control` Leaflet class to provide a simple control box with\n * a container.\n *\n * @name ControlBox\n * @class L.Control.ControlBox\n * @extends L.Control\n */\nL.Control.ControlBox = L.Control.extend({\n  options: {\n    position: 'topright',\n    content: '',\n    className: '',\n    autoOpen: true\n  },\n\n  initialize: function(options) {\n    // Merge with inherited options, assign resulting options to `this.options`\n    L.setOptions(this, options);\n\n    // Create an element\n    this.controlContainer = L.DomUtil.create('div');\n    this.controlContainer.className = this.options.className;\n    this.controlContainer.innerHTML = this.options.content;\n\n    // Determine if the control box should be shown right now or hidden\n    this._isVisible = true;\n    if (this.options.autoOpen) {\n      this.openBox();\n    } else {\n      this.closeBox();\n    }\n\n    // Disable scroll events on the container\n    L.DomEvent.disableScrollPropagation(this.controlContainer);\n  },\n\n  onAdd: function(map) {\n    // HTMLElement created in the initialization function. Return to have\n    // L.Control handle adding for us.\n    return this.controlContainer;\n  },\n\n  onRemove: function(map) {\n    // Handled automatically by `L.Control`\n  },\n\n  /**\n   * Sets the content of the `controlBox` to the stringified HTML.\n   *\n   * @param {String} stringifiedHTML\n   */\n  setContent: function(stringifiedHTML) {\n    if (this.controlContainer) {\n      this._content = stringifiedHTML;\n      this._updateContent();\n    }\n  },\n\n  /**\n   * Updates the content of the `this.controlContainer` element with the most\n   * up-to-date `this._content`.\n   */\n  _updateContent: function() {\n    if (!this._content || !this.controlContainer) return;\n\n    this.controlContainer.innerHTML = this._content;\n  },\n\n  /**\n   * Fetches the HTMLElement that contains the content. Pass the result to\n   * `L.DOMUtil` to make manual updates.\n   *\n   * @return {HTMLElement|null} - The HTMLElement that contains the content. If none, returns `null`.\n   */\n  getContainerElement: function() {\n    if (!this.controlContainer) return null;\n    return this.controlContainer;\n  },\n\n  /**\n   * Ensures the control box is visible on the map. If the control box is already\n   * visible, does nothing.\n   */\n  openBox: function() {\n    if (!this._isVisible && this.controlContainer && this._containerElIsHidden() === true) {\n      L.DomUtil.removeClass(this.controlContainer, 'visuallyhidden');\n    }\n    this._isVisible = true;\n  },\n\n  /**\n   * Ensures the control box is hidden. If the control box is already hidden,\n   * does nothing.\n   */\n  closeBox: function() {\n    if (this._isVisible && this.controlContainer && this._containerElIsHidden() === false) {\n      L.DomUtil.addClass(this.controlContainer, 'visuallyhidden');\n    }\n    this._isVisible = false;\n  },\n\n  /**\n   * Returns `true` if the control box is visible.\n   *\n   * @return {Boolean|null}\n   */\n  isOpen: function() {\n    if (!this.controlContainer) return null;\n    return this._isVisible;\n  },\n\n  /**\n   * Checks if the container HTMLElement has the `visuallyhidden` class. If the\n   * container doesn't exist, returns null. Otherwise, returns Boolean value:\n   * `true` if is has the class (and is hidden), `false` if it doesn't have the\n   * class (and is not hidden).s\n   *\n   * @return {Boolean|null}\n   */\n  _containerElIsHidden: function() {\n    if (!this.controlContainer) return null;\n    return L.DomUtil.hasClass(this.controlContainer, 'visuallyhidden');\n  }\n});\n\n/**\n * Creates a new control box.\n *\n * @param {Object} [options] - Configures the layer\n * @param {String} [options.position=topleft] - Sets the control position\n * @param {String} [options.content=] - The HTML content to place in the container\n * @param {String} [options.className=] - A string with CSS class names seperated by spaces\n * @return {L.Control.ControlBox} - New ControlBox instance\n */\nL.Control.controlBox = function(options) {\n  return new L.Control.ControlBox(options);\n};\n"]}