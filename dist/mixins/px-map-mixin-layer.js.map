{"version":3,"sources":["mixins/px-map-mixin-layer.es6.js"],"names":["MapLayerMixin","superclass","elementInst","options","__initialOptions","getOptions","createInst","fire","parent","hasLayer","addLayer","remove","__elAttached","canAddInst","notifyInstReady","lastOptions","__lastOptions","nextOptions","updateInst","willRemoveInst","removeInst","isReady","Error","mixins","window","PxMapMixin","MapLayer"],"mappings":"mzCAAA,CAAC,UAAW,CACV,aAOA,GAAIA,eAAgB,QAAhBA,cAAgB,CAACC,UAAD,8RAiBL,CACX,MAAO,KACR,CAnBiB,iDAuBJ,CACZ,GAAI,KAAKC,WAAT,CAAsB,OAEtB,GAAMC,SAAU,KAAKC,gBAAL,CAAwB,KAAKC,UAAL,EAAxC,CACA,KAAKH,WAAL,CAAmB,KAAKI,UAAL,CAAgBH,OAAhB,CAAnB,CAEA,KAAKI,IAAL,CAAU,+BAAV,CAGD,CAhCiB,uDAkCD,CAEhB,CApCiB,wCAsCVC,MAtCU,CAsCF,CACd,GAAI,CAACA,MAAD,EAAWA,OAAOC,QAAP,CAAgB,KAAKP,WAArB,CAAf,CAAkD,OAClDM,OAAOE,QAAP,CAAgB,KAAKR,WAArB,CACD,CAzCiB,+CA2CL,CACX,GAAI,CAAC,KAAKA,WAAV,CAAuB,OACvB,KAAKA,WAAL,CAAiBS,MAAjB,EACD,CA9CiB,2DAmDC,CACjB,GAAI,CAAC,KAAKT,WAAN,EAAqB,KAAKU,YAA1B,EAA0C,KAAKC,UAAL,EAA9C,CAAiE,CAC/D,KAAKC,eAAL,CAAqB,KAAKD,UAAL,EAArB,CACD,CACD,GAAI,CAAC,KAAKX,WAAV,CAAuB,OAEvB,GAAMa,aAAc,KAAKC,aAAL,EAAsB,KAAKZ,gBAA/C,CACA,GAAMa,aAAc,KAAKZ,UAAL,EAApB,CAEA,KAAKa,UAAL,CAAgBH,WAAhB,CAA6BE,WAA7B,EAIA,KAAKD,aAAL,CAAqBC,WACtB,CAjEiB,yCAsER,CACR,KAAKL,YAAL,CAAoB,KACrB,CAxEiB,2CA0EP,CACT,KAAKA,YAAL,CAAoB,IAApB,CACA,KAAKE,eAAL,CAAqB,KAAKD,UAAL,EAArB,CACD,CA7EiB,2CAkFP,CACT,KAAKM,cAAL,GACA,KAAKC,UAAL,GACA,KAAKR,YAAL,CAAoB,KACrB,CAtFiB,wDA+FFS,OA/FE,CA+FO,CACvB,GAAI,CAACA,OAAL,CAAc,MAAO,MAAP,CACd,KAAKd,IAAL,CAAU,2BAAV,EACA,MAAO,KACR,CAnGiB,+CAuGL,CACX,KAAM,IAAIe,MAAJ,CAAU,8CAAV,CACP,CAzGiB,+CA2GL,CACX,KAAM,IAAIA,MAAJ,CAAU,8CAAV,CACP,CA7GiB,+CA+GL,CACX,KAAM,IAAIA,MAAJ,CAAU,8CAAV,CACP,CAjHiB,mBAA8BrB,UAA9B,EAApB,CAoHA,GAAMsB,QAAUC,OAAOC,UAAP,CAAoBD,OAAOC,UAAP,EAAqB,EAAzD,CACAF,OAAOG,QAAP,CAAkB1B,aAWnB,CAxID","file":"px-map-mixin-layer.js","sourcesContent":["(function() {\n  'use strict';\n\n  /**\n   *\n   *\n   * @mixin MapLayerMixin\n   */\n  let MapLayerMixin = (superclass) => class extends superclass {\n    /**\n     * Some element instances may require a minimum number of defined options\n     * to be able to attach to their parent. If those options are defined via.\n     * attributes, they may not be deserialized or even set before the `willAddInst`\n     * method is called.\n     *\n     * Elements that need to defer until some options are set should override\n     * the `canAddInst` method and return `false` if the method\n     *\n     * Elements that may need to defer until some options are ready should\n     * override `instReady` and set it to `false` by default.\n     *\n     * Later, when the `updateInst` function is called, the element should check\n     * if all required options are set and call the method `this.notifyInstReady(true)`\n     * to trigger an event the parent will catch and use to attach this element.\n     */\n    canAddInst() {\n      return true;\n    }\n\n    // Lifecycle hooks for LayerBase, will be called by a LayerParent\n\n    willAddInst() {\n      if (this.elementInst) return;\n\n      const options = this.__initialOptions = this.getOptions();\n      this.elementInst = this.createInst(options);\n\n      this.fire('px-map-layer-instance-created');\n\n      // @TODO: Bind events\n    }\n\n    willRemoveInst() {\n      // @TODO: Unbind events\n    }\n\n    addInst(parent) {\n      if (!parent || parent.hasLayer(this.elementInst)) return;\n      parent.addLayer(this.elementInst);\n    }\n\n    removeInst() {\n      if (!this.elementInst) return;\n      this.elementInst.remove();\n    }\n\n    // Simple observer trigger for dynamic properties that should be synced\n    // to the instance\n\n    shouldUpdateInst() {\n      if (!this.elementInst && this.__elAttached && this.canAddInst()) {\n        this.notifyInstReady(this.canAddInst());\n      }\n      if (!this.elementInst) return;\n\n      const lastOptions = this.__lastOptions || this.__initialOptions;\n      const nextOptions = this.getOptions();\n\n      this.updateInst(lastOptions, nextOptions);\n\n      // Set `lastOptions` to `nextOptions` so the next time this method is called\n      // it will have access to the last options\n      this.__lastOptions = nextOptions;\n    }\n\n    // When this element is attached to the DOM, fire an event to notify\n    // a parent that it is ready\n\n    created() {\n      this.__elAttached = false;\n    }\n\n    attached() {\n      this.__elAttached = true;\n      this.notifyInstReady(this.canAddInst());\n    }\n\n    // When this element is detached from the DOM, its elementInst should be\n    // removed from the parent\n\n    detached() {\n      this.willRemoveInst();\n      this.removeInst();\n      this.__elAttached = false;\n    }\n\n    /**\n     * If this element's instance is ready to create and add to its parent,\n     * fires an event the parent will catch.\n     *\n     * @param {Boolean} isReady - If `true` instance parent will be notified\n     * @return {Boolean} - If `true` the parent was notified\n     */\n    notifyInstReady(isReady) {\n      if (!isReady) return false;\n      this.fire('px-map-layer-ready-to-add');\n      return true;\n    }\n\n    // Should be implemented by behaviors/components that extend LayerBase\n\n    createInst() {\n      throw new Error('The `createInst` method must be implemented.')\n    }\n\n    updateInst() {\n      throw new Error('The `updateInst` method must be implemented.')\n    }\n\n    getOptions() {\n      throw new Error('The `getOptions` method must be implemented.')\n    }\n  };\n\n  const mixins = (window.PxMapMixin = window.PxMapMixin || {});\n  mixins.MapLayer = MapLayerMixin;\n\n  // class MapLayer extends mixwith.mix().with(PxMapMixin.MapElement, PxMapMixin.MapLayer) {\n  //   constructor() {\n  //     super(...arguments);\n  //     this.initialize();\n  //   }\n  // }\n  //\n  // const klasses = (window.PxMap = window.PxMap || {});\n  // klasses.MapLayer = MapLayer;\n})();\n"]}