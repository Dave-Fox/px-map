{"version":3,"sources":["mixins/px-map-mixin-layer.es6.js"],"names":["MapLayerBaseMixin","superclass","__elAttached","notifyInstReady","canAddInst","willRemoveInst","removeInst","parent","addLayer","elementInst","remove","isReady","fire","MapLayerParentMixin","_attachedChildren","WeakMap","listen","_tryToAddAllChildren","bind","_tryToAddOneChild","_detachLayerChildren","evt","srcElement","_attachLayerChildren","stopPropagation","_attachLayerChild","children","getEffectiveChildren","length","child","childEl","has","willAddInst","addInst","set","async","_detachLayerChild","delete","mixins","window","PxMapMixin","MapLayerBase","MapLayerParent","MapLayer","mixwith","mix","PxMap","MapElement","with","klasses"],"mappings":"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","file":"px-map-mixin-layer.js","sourcesContent":["(function() {\n  'use strict';\n\n  /**\n   *\n   *\n   * @mixin MapLayerBase\n   */\n  let MapLayerBaseMixin = (superclass) => class extends superclass {\n    // When this element is attached to the DOM, fire an event to notify\n    // a parent that it is ready\n\n    created() {\n      this.__elAttached = false;\n    }\n\n    attached() {\n      this.__elAttached = true;\n      this.notifyInstReady(this.canAddInst());\n    }\n\n    // When this element is detached from the DOM, its elementInst should be\n    // removed from the parent\n\n    detached() {\n      this.willRemoveInst();\n      this.removeInst();\n      this.__elAttached = false;\n    }\n\n    // Methods to bind to/unbind from parent\n\n    bindInst(parent) {\n      parent.addLayer(this.elementInst);\n    }\n\n    unbindInst(parent) {\n      this.elementInst.remove();\n    }\n\n    /**\n     * Some element instances may require a minimum number of defined options\n     * to be able to attach to their parent. If those options are defined via.\n     * attributes, they may not be deserialized or even set before the `willAddInst`\n     * method is called.\n     *\n     * Elements that need to defer until some options are set should override\n     * the `canAddInst` method and return `false` if the method\n     *\n     * Elements that may need to defer until some options are ready should\n     * override `instReady` and set it to `false` by default.\n     *\n     * Later, when the `updateInst` function is called, the element should check\n     * if all required options are set and call the method `this.notifyInstReady(true)`\n     * to trigger an event the parent will catch and use to attach this element.\n     */\n    canAddInst() {\n      return true;\n    }\n\n    /**\n     * If this element's instance is ready to create and add to its parent,\n     * fires an event the parent will catch.\n     *\n     * @param {Boolean} isReady - If `true` instance parent will be notified\n     * @return {Boolean} - If `true` the parent was notified\n     */\n    notifyInstReady(isReady) {\n      if (!isReady) return false;\n      this.fire('px-map-layer-ready-to-add');\n      return true;\n    }\n  };\n\n  /**\n   *\n   *\n   * @mixin MapLayerParent\n   */\n  let MapLayerParentMixin = (superclass) => class extends superclass {\n    created() {\n      // Use a WeakMap to keep track of our attached children\n      this._attachedChildren = this._attachedChildren || new WeakMap();\n    }\n\n    attached() {\n      this.listen(this, 'px-map-layer-instance-created', this._tryToAddAllChildren.bind(this));\n      this.listen(this, 'px-map-layer-ready-to-add', this._tryToAddOneChild.bind(this));\n    }\n\n    detached() {\n      this._detachLayerChildren();\n    }\n\n    // Handles attaching children throughout this element's lifecycle\n\n    _tryToAddAllChildren(evt) {\n      // If this element's elementInst isn't ready, halt and wait until later\n      // If this event isn't coming from this element, do not handle\n      if (!this.elementInst || evt.srcElement !== this) return;\n\n      // If my own elementInst was just created, loop over children and try to attach them\n      this._attachLayerChildren();\n    }\n\n    _tryToAddOneChild(evt) {\n      // If the added-to-dom event belongs to this element, just return and let it bubble\n      if (evt.srcElement === this) return;\n\n      // This element is the parent, so stop this event from bubbling\n      evt.stopPropagation();\n\n      // If I have no elementInst, halt and wait until later\n      if (!this.elementInst) return;\n\n      this._attachLayerChild(evt.srcElement);\n    }\n\n    _attachLayerChildren() {\n      const children = this.getEffectiveChildren();\n      if (!children || !children.length) return;\n\n      for (let child of children) {\n        this._attachLayerChild(child);\n      }\n    }\n\n    _attachLayerChild(childEl) {\n      if (this._attachedChildren.has(childEl) || !childEl.willAddInst || !childEl.addInst || !childEl.canAddInst || !childEl.canAddInst()) return;\n      this._attachedChildren.set(childEl, true);\n\n      this.async(() => { childEl.willAddInst(); });\n      this.async(() => { childEl.addInst(this.elementInst); });\n    }\n\n    // Handles detaching children throughout this element's lifecycle\n\n    _detachLayerChildren() {\n      const children = this.getEffectiveChildren();\n      if (!children || !children.length) return;\n\n      for (let child of children) {\n        this._detachLayerChild(child);\n      }\n    }\n\n    _detachLayerChild(childEl) {\n      if (!this._attachedChildren.has(childEl) || !childEl.willRemoveInst || !childEl.removeInst) return;\n      this._attachedChildren.delete(childEl);\n\n      this.async(() => { childEl.willRemoveInst(); });\n      this.async(() => { childEl.removeInst(this.elementInst); });\n    }\n  };\n\n  const mixins = (window.PxMapMixin = window.PxMapMixin || {});\n  mixins.MapLayerBase = MapLayerBaseMixin;\n  mixins.MapLayerParent = MapLayerParentMixin;\n\n  class MapLayer extends mixwith.mix(PxMap.MapElement).with(\n    PxMapMixin.MapLayerBase,\n    PxMapMixin.MapLayerParent\n  ) {};\n\n  const klasses = (window.PxMap = window.PxMap || {});\n  klasses.MapLayer = MapLayer;\n})();\n"]}