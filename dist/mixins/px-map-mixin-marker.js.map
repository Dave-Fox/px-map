{"version":3,"sources":["mixins/px-map-mixin-marker.es6.js"],"names":["MapMarkerBaseMixin","superclass","properties","lat","type","Number","notify","observer","lng","name","String","addProperties","options","L","marker","geometry","config","lastOptions","nextOptions","elementInst","setLatLng","icon","setIcon","defaults","_getLatLng","extend","title","_getIcon","args","latLng","Error","mixins","window","PxMapMixin","MapMarkerBase","MapMarker","arguments","initialize","mixwith","mix","PxMap","MapLayer","with","klasses"],"mappings":"8tDAAA,CAAC,UAAW,CACV,aAOA,GAAIA,oBAAqB,QAArBA,mBAAqB,CAACC,UAAD,8RAGV,CACX,+FAAsB,uGAEtB,GAAMC,YAAa,CAQjBC,IAAK,CACHC,KAAMC,MADH,CAEHC,OAAQ,IAFL,CAGHC,SAAU,kBAHP,CARY,CAqBjBC,IAAK,CACHJ,KAAMC,MADH,CAEHC,OAAQ,IAFL,CAGHC,SAAU,kBAHP,CArBY,CAmCjBE,KAAM,CACJL,KAAMM,MADF,CAEJJ,OAAQ,IAFJ,CAGJC,SAAU,kBAHN,CAnCW,CAAnB,CA0CA,KAAKI,aAAL,CAAmBT,UAAnB,CACD,CAjDsB,8CAqDZU,OArDY,CAqDH,CAClB,MAAOC,GAAEC,MAAF,CAASF,QAAQG,QAAjB,CAA2BH,QAAQI,MAAnC,CACR,CAvDsB,8CAyDZC,WAzDY,CAyDCC,WAzDD,CAyDc,CACnC,GAAID,YAAYF,QAAZ,GAAyBG,YAAYH,QAAzC,CAAmD,CACjD,KAAKI,WAAL,CAAiBC,SAAjB,CAA2BF,YAAYH,QAAvC,CACD,CACD,GAAIE,YAAYD,MAAZ,CAAmBK,IAAnB,GAA4BH,YAAYF,MAAZ,CAAmBK,IAAnD,CAAyD,CACvD,KAAKF,WAAL,CAAiBG,OAAjB,CAAyBJ,YAAYF,MAAZ,CAAmBK,IAA5C,CACD,CACF,CAhEsB,uDAkEK,IAAbE,SAAa,2DAAJ,EAAI,CAC1B,GAAMR,UAAW,KAAKS,UAAL,EAAjB,CACA,GAAID,SAASR,QAAb,CAAuB,KAAKU,MAAL,CAAYV,QAAZ,CAAsBQ,SAASR,QAA/B,EAEvB,GAAMC,QAAS,EAAf,CACAA,OAAOU,KAAP,CAAgB,KAAKjB,IAAL,EAAa,EAA7B,CACAO,OAAOK,IAAP,CAAc,KAAKM,QAAL,EAAd,CACA,GAAIJ,SAASP,MAAb,CAAqB,KAAKS,MAAL,CAAYT,MAAZ,CAAoBO,SAASP,MAA7B,EAErB,MAAO,CAAED,iBAAF,CAAYC,aAAZ,CACR,CA5EsB,+CA8EH,yCAANY,IAAM,sCAANA,IAAM,uBAClB,mIAAoBA,IAApB,EACD,CAhFsB,2CAkFL,0CAANA,IAAM,2CAANA,IAAM,yBAChB,iIAAkBA,IAAlB,EACD,CApFsB,+CAsFH,0CAANA,IAAM,2CAANA,IAAM,yBAClB,mIAAoBA,IAApB,EACD,CAxFsB,+CA4FV,CACX,GAAI,CAAC,KAAKzB,GAAN,EAAa,CAAC,KAAKK,GAAvB,CAA4B,MAAO,EAAP,CAC5B,MAAOK,GAAEgB,MAAF,CAAS,KAAK1B,GAAd,CAAmB,KAAKK,GAAxB,CACR,CA/FsB,2CAiGZ,CACT,KAAM,IAAIsB,MAAJ,CAAU,2CAAV,CACP,CAnGsB,mBAA8B7B,UAA9B,EAAzB,CAsGA,GAAM8B,QAAUC,OAAOC,UAAP,CAAoBD,OAAOC,UAAP,EAAqB,EAAzD,CACAF,OAAOG,aAAP,CAAuBlC,kBAAvB,CA/GU,GAiHJmC,UAjHI,oEAkHR,oBAAc,+IACHC,SADG,GAEZ,OAAKC,UAAL,GAFY,aAGb,CArHO,kBAiHcC,QAAQC,GAAR,CAAYC,MAAMC,QAAlB,EAA4BC,IAA5B,CAAiCT,WAAWC,aAA5C,CAjHd,EA+HV,GAAMS,SAAWX,OAAOQ,KAAP,CAAeR,OAAOQ,KAAP,EAAgB,EAAhD,CACAG,QAAQR,SAAR,CAAoBA,SACrB,CAjID","file":"px-map-mixin-marker.js","sourcesContent":["(function() {\n  'use strict';\n\n  /**\n   *\n   *\n   * @mixin MapMarkerBase\n   */\n  let MapMarkerBaseMixin = (superclass) => class extends superclass {\n    // INITIALIZE ANY PROPERTIES, DO SETUP, ADD STATIC VALUES...\n\n    initialize() {\n      if (super.initialize) super.initialize();\n\n      const properties = {\n        /**\n         * The latitude of the marker. Set a value to draw the maker at a coordinate\n         * when the map is loaded. Listen for updates to track the marker's location\n         * if the marker is draggable or created dynamically by the user.\n         *\n         * @type {Number}\n         */\n        lat: {\n          type: Number,\n          notify: true,\n          observer: 'shouldUpdateInst'\n        },\n\n        /**\n         * The longitude of the marker. Set a value to draw the maker at a coordinate\n         * when the map is loaded. Listen for updates to track the marker's location\n         * if the marker is draggable or created dynamically by the user.\n         *\n         * @type {Number}\n         */\n        lng: {\n          type: Number,\n          notify: true,\n          observer: 'shouldUpdateInst'\n        },\n\n        /**\n         * A human-readable name for this layer group. If a tooltip is attached,\n         * this name will be shown on hover over the marker. If the map has a layer\n         * control panel, the user will click this name to show, hide, or\n         * manipulate this layer.\n         *\n         * @type {String}\n         */\n        name: {\n          type: String,\n          notify: true,\n          observer: 'shouldUpdateInst'\n        }\n      };\n\n      this.addProperties(properties);\n    }\n\n    // DEFAULT METHODS FOR EVERY BASE ELEMENT...\n\n    createInst(options) {\n      return L.marker(options.geometry, options.config);\n    }\n\n    updateInst(lastOptions, nextOptions) {\n      if (lastOptions.geometry !== nextOptions.geometry) {\n        this.elementInst.setLatLng(nextOptions.geometry);\n      }\n      if (lastOptions.config.icon !== nextOptions.config.icon) {\n        this.elementInst.setIcon(nextOptions.config.icon);\n      }\n    }\n\n    getInstOptions(defaults={}) {\n      const geometry = this._getLatLng();\n      if (defaults.geometry) this.extend(geometry, defaults.geometry);\n\n      const config = {};\n      config.title = (this.name || '');\n      config.icon = this._getIcon();\n      if (defaults.config) this.extend(config, defaults.config);\n\n      return { geometry, config };\n    }\n\n    canAddInst(...args) {\n      super.canAddInst(...args);\n    }\n\n    bindInst(...args) {\n      super.bindInst(...args);\n    }\n\n    unbindInst(...args) {\n      super.unbindInst(...args);\n    }\n\n    // CUSTOM METHODS FOR MARKERS...\n\n    _getLatLng() {\n      if (!this.lat || !this.lng) return [];\n      return L.latLng(this.lat, this.lng);\n    }\n\n    _getIcon() {\n      throw new Error('The `getIcon` method must be implemented.');\n    }\n  };\n\n  const mixins = (window.PxMapMixin = window.PxMapMixin || {});\n  mixins.MapMarkerBase = MapMarkerBaseMixin;\n\n  class MapMarker extends mixwith.mix(PxMap.MapLayer).with(PxMapMixin.MapMarkerBase) {\n    constructor() {\n      super(...arguments);\n      this.initialize();\n    }\n\n    // initialize() {\n    //   if (super.initialize) super.initialize();\n    //   console.log('marker klass');\n    //   const properties = {};\n    //   this.addProperties(properties);\n    // }\n  }\n\n  const klasses = (window.PxMap = window.PxMap || {});\n  klasses.MapMarker = MapMarker;\n})();\n"]}