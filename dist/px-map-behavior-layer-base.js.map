{"version":3,"sources":["px-map-behavior-layer-base.es6.js"],"names":["LayerBaseImpl","canAddInst","willAddInst","elementInst","options","__initialOptions","getOptions","createInst","fire","willRemoveInst","addInst","parent","hasLayer","addLayer","removeInst","remove","shouldUpdateInst","__elAttached","notifyInstReady","lastOptions","__lastOptions","nextOptions","updateInst","created","attached","detached","isReady","Error","namespace","window","PxMapBehavior","LayerBase","ElementBase"],"mappings":"aAAA,CAAC,UAAW,CACV,aAOA,GAAMA,eAAgB,CAiBpBC,UAjBoB,sBAiBP,CACX,MAAO,KACR,CAnBmB,CAuBpBC,WAvBoB,uBAuBN,CACZ,GAAI,KAAKC,WAAT,CAAsB,OAEtB,GAAMC,SAAU,KAAKC,gBAAL,CAAwB,KAAKC,UAAL,EAAxC,CACA,KAAKH,WAAL,CAAmB,KAAKI,UAAL,CAAgBH,OAAhB,CAAnB,CAEA,KAAKI,IAAL,CAAU,+BAAV,CAGD,CAhCmB,CAkCpBC,cAlCoB,0BAkCH,CAEhB,CApCmB,CAsCpBC,OAtCoB,kBAsCZC,MAtCY,CAsCJ,CACd,GAAI,CAACA,MAAD,EAAWA,OAAOC,QAAP,CAAgB,KAAKT,WAArB,CAAf,CAAkD,OAClDQ,OAAOE,QAAP,CAAgB,KAAKV,WAArB,CACD,CAzCmB,CA2CpBW,UA3CoB,sBA2CP,CACX,GAAI,CAAC,KAAKX,WAAV,CAAuB,OACvB,KAAKA,WAAL,CAAiBY,MAAjB,EACD,CA9CmB,CAmDpBC,gBAnDoB,4BAmDD,CACjB,GAAI,CAAC,KAAKb,WAAN,EAAqB,KAAKc,YAA1B,EAA0C,KAAKhB,UAAL,EAA9C,CAAiE,CAC/D,KAAKiB,eAAL,CAAqB,KAAKjB,UAAL,EAArB,CACD,CACD,GAAI,CAAC,KAAKE,WAAV,CAAuB,OAEvB,GAAMgB,aAAc,KAAKC,aAAL,EAAsB,KAAKf,gBAA/C,CACA,GAAMgB,aAAc,KAAKf,UAAL,EAApB,CAEA,KAAKgB,UAAL,CAAgBH,WAAhB,CAA6BE,WAA7B,EAIA,KAAKD,aAAL,CAAqBC,WACtB,CAjEmB,CAsEpBE,OAtEoB,mBAsEV,CACR,KAAKN,YAAL,CAAoB,KACrB,CAxEmB,CA0EpBO,QA1EoB,oBA0ET,CACT,KAAKP,YAAL,CAAoB,IAApB,CACA,KAAKC,eAAL,CAAqB,KAAKjB,UAAL,EAArB,CACD,CA7EmB,CAkFpBwB,QAlFoB,oBAkFT,CACT,KAAKhB,cAAL,GACA,KAAKK,UAAL,GACA,KAAKG,YAAL,CAAoB,KACrB,CAtFmB,CA+FpBC,eA/FoB,0BA+FJQ,OA/FI,CA+FK,CACvB,GAAI,CAACA,OAAL,CAAc,MAAO,MAAP,CACd,KAAKlB,IAAL,CAAU,2BAAV,EACA,MAAO,KACR,CAnGmB,CAuGpBD,UAvGoB,sBAuGP,CACX,KAAM,IAAIoB,MAAJ,CAAU,8CAAV,CACP,CAzGmB,CA2GpBL,UA3GoB,sBA2GP,CACX,KAAM,IAAIK,MAAJ,CAAU,8CAAV,CACP,CA7GmB,CA+GpBrB,UA/GoB,sBA+GP,CACX,KAAM,IAAIqB,MAAJ,CAAU,8CAAV,CACP,CAjHmB,CAAtB,CAoHA,GAAMC,WAAaC,OAAOC,aAAP,CAAuBD,OAAOC,aAAP,EAAwB,EAAlE,CACAF,UAAUG,SAAV,CAAsB,CACpBH,UAAUI,WADU,CAEpBhC,aAFoB,CAIvB,CAjID","file":"px-map-behavior-layer-base.js","sourcesContent":["(function() {\n  'use strict';\n\n  /**\n   * - All layers are children of some LayerParent (or the map)\n   *\n   * @polymerBehavior PxMapBehavior.LayerBase\n   */\n  const LayerBaseImpl = {\n    /**\n     * Some element instances may require a minimum number of defined options\n     * to be able to attach to their parent. If those options are defined via.\n     * attributes, they may not be deserialized or even set before the `willAddInst`\n     * method is called.\n     *\n     * Elements that need to defer until some options are set should override\n     * the `canAddInst` method and return `false` if the method\n     *\n     * Elements that may need to defer until some options are ready should\n     * override `instReady` and set it to `false` by default.\n     *\n     * Later, when the `updateInst` function is called, the element should check\n     * if all required options are set and call the method `this.notifyInstReady(true)`\n     * to trigger an event the parent will catch and use to attach this element.\n     */\n    canAddInst() {\n      return true;\n    },\n\n    // Lifecycle hooks for LayerBase, will be called by a LayerParent\n\n    willAddInst() {\n      if (this.elementInst) return;\n\n      const options = this.__initialOptions = this.getOptions();\n      this.elementInst = this.createInst(options);\n\n      this.fire('px-map-layer-instance-created');\n\n      // @TODO: Bind events\n    },\n\n    willRemoveInst() {\n      // @TODO: Unbind events\n    },\n\n    addInst(parent) {\n      if (!parent || parent.hasLayer(this.elementInst)) return;\n      parent.addLayer(this.elementInst);\n    },\n\n    removeInst() {\n      if (!this.elementInst) return;\n      this.elementInst.remove();\n    },\n\n    // Simple observer trigger for dynamic properties that should be synced\n    // to the instance\n\n    shouldUpdateInst() {\n      if (!this.elementInst && this.__elAttached && this.canAddInst()) {\n        this.notifyInstReady(this.canAddInst());\n      }\n      if (!this.elementInst) return;\n\n      const lastOptions = this.__lastOptions || this.__initialOptions;\n      const nextOptions = this.getOptions();\n\n      this.updateInst(lastOptions, nextOptions);\n\n      // Set `lastOptions` to `nextOptions` so the next time this method is called\n      // it will have access to the last options\n      this.__lastOptions = nextOptions;\n    },\n\n    // When this element is attached to the DOM, fire an event to notify\n    // a parent that it is ready\n\n    created() {\n      this.__elAttached = false;\n    },\n\n    attached() {\n      this.__elAttached = true;\n      this.notifyInstReady(this.canAddInst());\n    },\n\n    // When this element is detached from the DOM, its elementInst should be\n    // removed from the parent\n\n    detached() {\n      this.willRemoveInst();\n      this.removeInst();\n      this.__elAttached = false;\n    },\n\n    /**\n     * If this element's instance is ready to create and add to its parent,\n     * fires an event the parent will catch.\n     *\n     * @param {Boolean} isReady - If `true` instance parent will be notified\n     * @return {Boolean} - If `true` the parent was notified\n     */\n    notifyInstReady(isReady) {\n      if (!isReady) return false;\n      this.fire('px-map-layer-ready-to-add');\n      return true;\n    },\n\n    // Should be implemented by behaviors/components that extend LayerBase\n\n    createInst() {\n      throw new Error('The `createInst` method must be implemented.')\n    },\n\n    updateInst() {\n      throw new Error('The `updateInst` method must be implemented.')\n    },\n\n    getOptions() {\n      throw new Error('The `getOptions` method must be implemented.')\n    }\n  };\n\n  const namespace = (window.PxMapBehavior = window.PxMapBehavior || {});\n  namespace.LayerBase = [\n    namespace.ElementBase,\n    LayerBaseImpl\n  ];\n})()\n"]}