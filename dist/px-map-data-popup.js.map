{"version":3,"sources":["px-map-data-popup.es6.js"],"names":["PxMapDataPopup","data","Array","isArray","key","push","options","_getPopupOptions","className","maxWidth","minWidth","content","_getPopupContent","L","popup","setContent","defaults","Polymer","dom","root","innerHTML","trim","ns","window","PxMapBehavior","ElementInstance","PopupInstance","title","type","String","observer","Object","_dataAsList","computed"],"mappings":"+3BAAA,CAAC,UAAU,CACT,aADS,GAGHA,eAHG,iKAyDY,CACjB,GAAI,CAAC,KAAKC,IAAN,EAAe,QAAO,KAAKA,IAAZ,IAAqB,QAAxC,CAAmD,OAEnD,GAAIC,MAAMC,OAAN,CAAc,KAAKF,IAAnB,CAAJ,CAA8B,MAAO,MAAKA,IAAZ,CAE9B,GAAIA,MAAO,EAAX,CACA,IAAK,GAAIG,IAAT,GAAgBH,KAAhB,CAAsB,CACpBA,KAAKI,IAAL,CAAUD,GAAV,CAAeH,KAAKG,GAAL,CAAf,CACD,CACD,MAAOH,KACR,CAnEM,mDAqEQ,CACb,GAAMK,SAAU,KAAKC,gBAAL,CAAsB,CAAEC,UAAW,gBAAb,CAA+BC,SAAU,GAAzC,CAA8CC,SAAU,GAAxD,CAAtB,CAAhB,CACA,GAAMC,SAAU,KAAKC,gBAAL,EAAhB,CACA,MAAOC,GAAEC,KAAF,CAAQR,OAAR,EAAiBS,UAAjB,CAA4BJ,OAA5B,CACR,CAzEM,2DA2EuB,IAAbK,SAAa,2DAAJ,EAAI,CAC5B,GAAMV,SAAUU,QAAhB,CACA,MAAOV,QACR,CA9EM,2DAsFY,CACjB,MAAOW,SAAQC,GAAR,CAAY,KAAKC,IAAjB,EAAuBC,SAAvB,CAAiCC,IAAjC,EACR,CAxFM,8BAKE,CACP,MAAO,mBACR,CAPM,qCAUS,CACd,GAAMC,IAAKC,OAAOC,aAAlB,CACA,MAAO,CACLF,GAAGG,eADE,CAELH,GAAGI,aAFE,CAIR,CAhBM,sCAmBU,CACf,MAAO,CAMLC,MAAO,CACLC,KAAMC,MADD,CAELC,SAAU,qBAFL,CANF,CAyBL7B,KAAM,CACJ2B,KAAMG,MADF,CAzBD,CA6BLC,YAAa,CACXJ,KAAM1B,KADK,CAEX+B,SAAU,wBAFC,CAGXH,SAAU,qBAHC,CA7BR,CAmCR,CAvDM,6BA4FTb,QAAQjB,cAAR,CACD,CA7FD","file":"px-map-data-popup.js","sourcesContent":["(function(){\n  'use strict';\n\n  class PxMapDataPopup {\n    /* Name for the component */\n    get is() {\n      return 'px-map-data-popup';\n    }\n\n    /* Behaviors to import for this component */\n    get behaviors() {\n      const ns = window.PxMapBehavior;\n      return [\n        ns.ElementInstance,\n        ns.PopupInstance\n      ];\n    }\n\n    /* Properties for this component */\n    get properties() {\n      return {\n        /**\n         * Title text to display in bold at the top of the popup. Should be kept\n         * relatively short (25 characters or less) to keep the popup from\n         * growing too large.\n         */\n        title: {\n          type: String,\n          observer: '_updatePopupContent'\n        },\n\n        /**\n         * A list of key/valye pairs to display in a data table. Can be in the\n         * format of an array of arrays, or an object.\n         *\n         * Arrays: An array of arrays, each containing two values. For example,\n         * to show the name and location of a place, set this attribute to:\n         * '[ [\"Name\" : \"Tokyo\"], [\"Location\" : \"Japan\"] ]'\n         *\n         * Object: An object with human-readable keys and associated values. For\n         * example, to show the name and location of a place, set this attribute to:\n         * '{ \"Name\" : \"Tokyo\", \"Location\" : \"Japan\" }'\n         *\n         * @type {Array|Object}\n         */\n        data: {\n          type: Object\n        },\n\n        _dataAsList: {\n          type: Array,\n          computed: '_computeDataList(data)',\n          observer: '_updatePopupContent'\n        }\n      }\n    }\n\n    _computeDataList() {\n      if (!this.data || (typeof this.data !== 'object')) return;\n      // No transformation needed, already an array\n      if (Array.isArray(this.data)) return this.data;\n      // Otherwise, return mapped keys/values as array\n      let data = [];\n      for (let key in data) {\n        data.push(key, data[key]);\n      }\n      return data;\n    }\n\n    _createPopup() {\n      const options = this._getPopupOptions({ className: 'map-data-popup', maxWidth: 400, minWidth: 300 });\n      const content = this._getPopupContent();\n      return L.popup(options).setContent(content);\n    }\n\n    _getPopupOptions(defaults={}) {\n      const options = defaults;\n      return options;\n    }\n\n    /**\n     * Retrieves popup content from the light DOM and cleans it up preparing\n     * for insertion into the popup instnace.\n     *\n     * @return {String} Stringified HTML\n     */\n    _getPopupContent() {\n      return Polymer.dom(this.root).innerHTML.trim();\n    }\n  }\n\n  /* Register this component with the Polymer constructor. */\n  Polymer(PxMapDataPopup);\n})();\n"]}