{"version":3,"sources":["px-map-behavior-control-instance.es6.js"],"names":["ControlInstance","properties","parentInstance","type","Object","notify","position","String","observer","observers","ready","instance","_createElementInstance","_setElementInstance","attached","_attachToParentInstance","detached","_detachFromParentInstance","hasLayer","elementInstance","_bindControlParentListeners","addTo","_unbindParentControlListeners","remove","_updateControlPosition","length","getPosition","newPosition","_formatPosition","setPosition","replace","parentListeners","eventName","listen","parentElement","unlisten","namespace","window","PxMapBehavior"],"mappings":"oPAAA,CAAC,UAAW,CACV,aAOA,GAAMA,iBAAkB,CACtBC,WAAY,CAQTC,eAAgB,CACdC,KAAMC,MADQ,CAEdC,OAAQ,IAFM,CARP,CAoBVC,SAAU,CACRH,KAAMI,MADE,CAERC,SAAU,wBAFF,CApBA,CADU,CA2BrBC,UAAW,CAAC,yCAAD,CA3BU,CA6BtBC,KA7BsB,iBA6Bd,CAGN,GAAIC,UAAW,KAAKC,sBAAL,EAAf,CACA,KAAKC,mBAAL,CAAyBF,QAAzB,CACD,CAlCqB,CAoCtBG,QApCsB,oBAoCX,CACT,KAAKC,uBAAL,EACD,CAtCqB,CAwCtBC,QAxCsB,oBAwCX,CACT,KAAKC,yBAAL,EACD,CA1CqB,CA4CtBF,uBA5CsB,mCA4CI,CACxB,GAAI,KAAKb,cAAL,EAAuB,CAAC,KAAKA,cAAL,CAAoBgB,QAApB,CAA6B,KAAKC,eAAlC,CAA5B,CAAgF,CAC9E,KAAKC,2BAAL,GACA,KAAKD,eAAL,CAAqBE,KAArB,CAA2B,KAAKnB,cAAhC,CACD,CACF,CAjDqB,CAmDtBe,yBAnDsB,qCAmDM,CAC1B,GAAI,KAAKf,cAAL,EAAuBA,eAAegB,QAAf,CAAwB,KAAKC,eAA7B,CAA3B,CAA0E,CACxE,KAAKG,6BAAL,GACA,KAAKH,eAAL,CAAqBI,MAArB,EACD,CACF,CAxDqB,CA0DtBC,sBA1DsB,kCA0DG,CACvB,GAAI,CAAC,KAAKL,eAAN,EAAyB,CAAC,KAAKb,QAA/B,EAA2C,CAAC,KAAKA,QAAL,CAAcmB,MAA9D,CAAsE,OAEtE,GAAMnB,UAAW,KAAKa,eAAL,CAAqBO,WAArB,EAAjB,CACA,GAAMC,aAAc,KAAKC,eAAL,CAAqB,KAAKtB,QAA1B,CAApB,CAEA,GAAIA,WAAaqB,WAAjB,CAA8B,CAC5B,KAAKR,eAAL,CAAqBU,WAArB,CAAiCF,WAAjC,CACD,CACF,CAnEqB,CA4EtBC,eA5EsB,0BA4ENtB,QA5EM,CA4EI,CACxB,MAAOA,UAASwB,OAAT,CAAiB,IAAjB,CAAuB,EAAvB,CACR,CA9EqB,CA0FtBV,2BA1FsB,uCA0FQ,CAC5B,GAAI,QAAO,KAAKW,eAAZ,IAAgC,QAApC,CAA8C,OAE9C,IAAK,GAAIC,UAAT,GAAsB,MAAKD,eAA3B,CAA4C,CAC1C,KAAKE,MAAL,CAAY,KAAKC,aAAjB,CAAgCF,SAAhC,CAA2C,KAAKD,eAAL,CAAqBC,SAArB,CAA3C,CACD,CACF,CAhGqB,CAqGtBV,6BArGsB,yCAqGU,CAC9B,GAAI,QAAO,KAAKS,eAAZ,IAAgC,QAApC,CAA8C,OAE9C,IAAK,GAAIC,UAAT,GAAsB,MAAKD,eAA3B,CAA4C,CAC1C,KAAKI,QAAL,CAAc,KAAKD,aAAnB,CAAkCF,SAAlC,CAA6C,KAAKD,eAAL,CAAqBC,SAArB,CAA7C,CACD,CACF,CA3GqB,CAAxB,CA8GA,GAAMI,WAAaC,OAAOC,aAAP,CAAuBD,OAAOC,aAAP,EAAwB,EAAlE,CACAF,UAAUpC,eAAV,CAA4BA,eAC7B,CAxHD","file":"px-map-behavior-control-instance.js","sourcesContent":["(function() {\n  'use strict';\n\n  /**\n   *\n   *\n   * @polymerBehavior PxMapBehavior.ControlInstance\n   */\n  const ControlInstance = {\n    properties: {\n      /**\n       * The map instance the control will attach to. Controls should be a direct\n       * descendant of the map to have the `parentInstance` automatically\n       * bound. Otherwise, the map will need to be bound to the control manually.\n       *\n       * @type {Object}\n       */\n       parentInstance: {\n         type: Object,\n         notify: true\n      },\n\n      /**\n       * Positions the control in one of the map corners. Choose from 'top-right',\n       * 'top-left', 'bottom-right', or 'bottom-left'. You must provide a\n       * value or the control will not be created.\n       *\n       * @type {String}\n       */\n      position: {\n        type: String,\n        observer: '_updateControlPosition'\n      }\n    },\n\n     observers: ['_attachToParentInstance(parentInstance)'],\n\n    ready() {\n      // The `_createElementInstance` method should be defined in a component\n      // or behavior that extends this behavior\n      let instance = this._createElementInstance();\n      this._setElementInstance(instance);\n    },\n\n    attached() {\n      this._attachToParentInstance();\n    },\n\n    detached() {\n      this._detachFromParentInstance();\n    },\n\n    _attachToParentInstance() {\n      if (this.parentInstance && !this.parentInstance.hasLayer(this.elementInstance)) {\n        this._bindControlParentListeners();\n        this.elementInstance.addTo(this.parentInstance);\n      }\n    },\n\n    _detachFromParentInstance() {\n      if (this.parentInstance && parentInstance.hasLayer(this.elementInstance)) {\n        this._unbindParentControlListeners();\n        this.elementInstance.remove();\n      }\n    },\n\n    _updateControlPosition() {\n      if (!this.elementInstance || !this.position || !this.position.length) return;\n\n      const position = this.elementInstance.getPosition();\n      const newPosition = this._formatPosition(this.position);\n\n      if (position !== newPosition) {\n        this.elementInstance.setPosition(newPosition);\n      }\n    },\n\n    /**\n     * Takes a position name like 'top-right' and reformats it into the Leaflet\n     * friendly (but human un-friendly) 'topright'.\n     *\n     * @param {String} position - The position, possibly with dashes\n     * @return {String} - The cleaned position\n     */\n    _formatPosition(position) {\n      return position.replace(/\\-/, '');\n    },\n\n    /**\n     * Bind listeners to the `parentElement`, which is the root `px-map`\n     * map element. Messages fired from children to controls can be\n     * caught and handled here.\n     *\n     * Parent listeners should be added as a property on the control that\n     * inherits this behavior. Add them like the default Polymer listeners\n     * block (property `parentListeners` should be an object with keys `eventName`\n     * and values `eventHandlerFunctionName`, both as strings.)\n     */\n    _bindControlParentListeners() {\n      if (typeof this.parentListeners !== 'object') return;\n\n      for (let eventName in this.parentListeners) {\n        this.listen(this.parentElement, eventName, this.parentListeners[eventName]);\n      }\n    },\n\n    /**\n     * Removes parent listeners when the element is ready to detach.\n     */\n    _unbindParentControlListeners() {\n      if (typeof this.parentListeners !== 'object') return;\n\n      for (let eventName in this.parentListeners) {\n        this.unlisten(this.parentElement, eventName, this.parentListeners[eventName]);\n      }\n    }\n  };\n\n  const namespace = (window.PxMapBehavior = window.PxMapBehavior || {});\n  namespace.ControlInstance = ControlInstance;\n})()\n"]}