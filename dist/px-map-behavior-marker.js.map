{"version":3,"sources":["px-map-behavior-marker.es6.js"],"names":["MarkerBase","properties","lat","type","Number","notify","observer","lon","name","String","createInst","options","L","marker","geometry","config","updateInst","lastOptions","nextOptions","elementInst","setLatLng","icon","setIcon","getOptions","getLatLon","title","getMarkerIcon","Error","namespace","window","PxMapBehavior"],"mappings":"aAAA,CAAC,UAAW,CACV,aAMA,GAAMA,YAAa,CACjBC,WAAY,CAQVC,IAAK,CACHC,KAAMC,MADH,CAEHC,OAAQ,IAFL,CAGHC,SAAU,kBAHP,CARK,CAqBVC,IAAK,CACHJ,KAAMC,MADH,CAEHC,OAAQ,IAFL,CAGHC,SAAU,kBAHP,CArBK,CAmCVE,KAAM,CACJL,KAAMM,MADF,CAEJJ,OAAQ,IAFJ,CAGJC,SAAU,kBAHN,CAnCI,CADK,CA2CjBI,UA3CiB,qBA2CNC,OA3CM,CA2CG,CAClB,MAAOC,GAAEC,MAAF,CAASF,QAAQG,QAAjB,CAA2BH,QAAQI,MAAnC,CACR,CA7CgB,CA+CjBC,UA/CiB,qBA+CNC,WA/CM,CA+COC,WA/CP,CA+CoB,CACnC,GAAID,YAAYH,QAAZ,GAAyBI,YAAYJ,QAAzC,CAAmD,CACjD,KAAKK,WAAL,CAAiBC,SAAjB,CAA2BF,YAAYJ,QAAvC,CACD,CACD,GAAIG,YAAYI,IAAZ,GAAqBH,YAAYG,IAArC,CAA2C,CACzC,KAAKF,WAAL,CAAiBG,OAAjB,CAAyBJ,YAAYG,IAArC,CACD,CACF,CAtDgB,CAwDjBE,UAxDiB,sBAwDJ,CACX,GAAMT,UAAW,KAAKU,SAAL,EAAjB,CAEA,GAAMT,QAAS,EAAf,CACAA,OAAOU,KAAP,CAAgB,KAAKjB,IAAL,EAAa,EAA7B,CACAO,OAAOM,IAAP,CAAc,KAAKK,aAAL,EAAd,CAEA,MAAO,CAAEZ,iBAAF,CAAYC,aAAZ,CACR,CAhEgB,CAoEjBW,aApEiB,yBAoED,CACd,KAAM,IAAIC,MAAJ,CAAU,iDAAV,CACP,CAtEgB,CAAnB,CAyEA,GAAMC,WAAaC,OAAOC,aAAP,CAAuBD,OAAOC,aAAP,EAAwB,EAAlE,CACAF,UAAU5B,UAAV,CAAuBA,UACxB,CAlFD","file":"px-map-behavior-marker.js","sourcesContent":["(function() {\n  'use strict';\n\n  /**\n   *\n   * @polymerBehavior PxMapBehavior.MarkerBase\n   */\n  const MarkerBase = {\n    properties: {\n      /**\n       * The latitude of the marker. Set a value to draw the maker at a coordinate\n       * when the map is loaded. Listen for updates to track the marker's location\n       * if the marker is draggable or created dynamically by the user.\n       *\n       * @type {Number}\n       */\n      lat: {\n        type: Number,\n        notify: true,\n        observer: 'shouldUpdateInst'\n      },\n\n      /**\n       * The longitude of the marker. Set a value to draw the maker at a coordinate\n       * when the map is loaded. Listen for updates to track the marker's location\n       * if the marker is draggable or created dynamically by the user.\n       *\n       * @type {Number}\n       */\n      lon: {\n        type: Number,\n        notify: true,\n        observer: 'shouldUpdateInst'\n      },\n\n      /**\n       * A human-readable name for this layer group. If a tooltip is attached,\n       * this name will be shown on hover over the marker. If the map has a layer\n       * control panel, the user will click this name to show, hide, or\n       * manipulate this layer.\n       *\n       * @type {String}\n       */\n      name: {\n        type: String,\n        notify: true,\n        observer: 'shouldUpdateInst'\n      }\n    },\n\n    createInst(options) {\n      return L.marker(options.geometry, options.config);\n    },\n\n    updateInst(lastOptions, nextOptions) {\n      if (lastOptions.geometry !== nextOptions.geometry) {\n        this.elementInst.setLatLng(nextOptions.geometry);\n      }\n      if (lastOptions.icon !== nextOptions.icon) {\n        this.elementInst.setIcon(nextOptions.icon);\n      }\n    },\n\n    getOptions() {\n      const geometry = this.getLatLon();\n\n      const config = {};\n      config.title = (this.name || '');\n      config.icon = this.getMarkerIcon();\n\n      return { geometry, config };\n    },\n\n    // Should be implemented by behaviors that extend MarkerBase\n\n    getMarkerIcon() {\n      throw new Error('The `getMarkerIcon` method must be implemented.');\n    }\n  };\n\n  const namespace = (window.PxMapBehavior = window.PxMapBehavior || {});\n  namespace.MarkerBase = MarkerBase;\n})()\n"]}