{"version":3,"sources":["px-map-behavior-control.es6.js"],"names":["namespace","window","PxMapBehavior","ControlImpl","properties","position","type","String","value","observer","addInst","parent","elementInst","addTo","removeInst","remove","Control","Layer","ZoomControlImpl","zoomInText","zoomOutText","createInst","options","L","control","zoom","updateInst","lastOptions","nextOptions","setPosition","getInstOptions","ZoomControl"],"mappings":"aAAA,CAAC,UAAW,CACV,aAOA,GAAMA,WAAaC,OAAOC,aAAP,CAAuBD,OAAOC,aAAP,EAAwB,EAAlE,CAMA,GAAMC,aAAc,CAClBC,WAAY,CAOVC,SAAU,CACRC,KAAMC,MADE,CAERC,MAAO,aAFC,CAGRC,SAAU,kBAHF,CAPA,CADM,CAelBC,OAfkB,kBAeVC,MAfU,CAeF,CACd,KAAKC,WAAL,CAAiBC,KAAjB,CAAuBF,MAAvB,CACD,CAjBiB,CAmBlBG,UAnBkB,qBAmBPH,MAnBO,CAmBC,CACjB,KAAKC,WAAL,CAAiBG,MAAjB,EACD,CArBiB,CAApB,CAwBAf,UAAUgB,OAAV,CAAoB,CAClBhB,UAAUiB,KADQ,CAElBd,WAFkB,CAApB,CASA,GAAMe,iBAAkB,CACtBd,WAAY,CAOVe,WAAY,CACVb,KAAMC,MADI,CAEVC,MAAO,4BAFG,CAPF,CAkBVY,YAAa,CACXd,KAAMC,MADK,CAEXC,MAAO,6BAFI,CAlBH,CADU,CAyBtBa,UAzBsB,qBAyBXC,OAzBW,CAyBF,CAElB,MAAOC,GAAEC,OAAF,CAAUC,IAAV,CAAeH,OAAf,CACR,CA5BqB,CA8BtBI,UA9BsB,qBA8BXC,WA9BW,CA8BEC,WA9BF,CA8Be,CACnC,GAAID,YAAYtB,QAAZ,GAAyBuB,YAAYvB,QAAzC,CAAmD,CACjD,KAAKO,WAAL,CAAiBiB,WAAjB,CAA6BD,YAAYvB,QAAzC,CACD,CACF,CAlCqB,CAoCtByB,cApCsB,0BAoCL,CACf,MAAO,CACLzB,SAAU,KAAKA,QADV,CAELc,WAAY,KAAKA,UAFZ,CAGLC,YAAa,KAAKA,WAHb,CAKR,CA1CqB,CAAxB,CA6CApB,UAAU+B,WAAV,CAAwB,CACtB/B,UAAUgB,OADY,CAEtBE,eAFsB,CAKzB,CAjGD","file":"px-map-behavior-control.js","sourcesContent":["(function() {\n  'use strict';\n\n  /****************************************************************************\n   * BEHAVIORS\n   ****************************************************************************/\n\n  /* Ensures the behavior namespace is created */\n  const namespace = (window.PxMapBehavior = window.PxMapBehavior || {});\n\n  /**\n   *\n   * @polymerBehavior PxMapBehavior.Control\n   */\n  const ControlImpl = {\n    properties: {\n      /**\n       * Positions the control in one of the map corners. Choose from 'topright',\n       * 'topleft', 'bottomright', or 'bottomleft'.\n       *\n       * @type {String}\n       */\n      position: {\n        type: String,\n        value: 'bottomright',\n        observer: 'shouldUpdateInst'\n      }\n    },\n\n    addInst(parent) {\n      this.elementInst.addTo(parent);\n    },\n\n    removeInst(parent) {\n      this.elementInst.remove();\n    }\n  };\n  /* Bind Control behavior */\n  namespace.Control = [\n    namespace.Layer,\n    ControlImpl\n  ];\n\n  /**\n   *\n   * @polymerBehavior PxMapBehavior.ZoomControl\n   */\n  const ZoomControlImpl = {\n    properties: {\n      /**\n       * Sets the icon for zoom in button\n       * This is not dynamic and can only be set at run time\n       *\n       * @type {String}\n       */\n      zoomInText: {\n        type: String, \n        value: '<i class=\"fa fa-plus\"></i>',\n      },\n    \n      /**\n       * Sets the icon for zoom out button\n       * This is not dynamic and can only be set at run time\n       *\n       * @type {String}\n       */\n      zoomOutText: {\n        type: String, \n        value: '<i class=\"fa fa-minus\"></i>',\n      }\n    },\n\n    createInst(options) {\n      // return new PxMap.ZoomControl(options);\n      return L.control.zoom(options);\n    },\n\n    updateInst(lastOptions, nextOptions) {\n      if (lastOptions.position !== nextOptions.position) {\n        this.elementInst.setPosition(nextOptions.position);\n      }\n    },\n\n    getInstOptions() {\n      return {\n        position: this.position,\n        zoomInText: this.zoomInText,\n        zoomOutText: this.zoomOutText\n      };\n    }\n  };\n  /* Bind ZoomControl behavior */\n  namespace.ZoomControl = [\n    namespace.Control,\n    ZoomControlImpl\n  ];\n\n})();\n"]}