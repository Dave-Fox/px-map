{"version":3,"sources":["px-map-behaviors-distribute-properties.es6.js"],"names":["DistributeProperties","attached","distributions","length","_addDistributionObservers","detached","_removeDistributionObservers","properties","propertyName","_distributeOnNewChildren","_distributeOnPropertyChange","newChildDistributors","__newChildDistributors","distributeFns","values","fn","Polymer","dom","unobserveNodes","distributors","Map","has","distributeFn","_distributePropertyToChildren","distributorInstance","observeNodes","set","__propertyChangeDistributors","Bind","addPropertyEffect","applyPropertyFn","children","getEffectiveChildren","child","debounce","is","namespace","window","PxMapBehaviors"],"mappings":"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","file":"px-map-behaviors-distribute-properties.js","sourcesContent":["(function() {\n  'use strict';\n\n  /**\n   * When light DOM children are distributed into a `px-map` framework component,\n   * that component will often have to share a reference to one of its properties\n   * with the child. This behavior wraps around that use case, ensuring that\n   * properties will be applied to any distributed light DOM children and that\n   * changes to those properties on the parent will trigger a re-distribution\n   * to the children that keeps them up-to-date.\n   *\n   * Distributions should be configured in the component's Polymer constructor\n   * in a similar way to the `observers` block provided by the Polymer library.\n   *\n   * For example, this `simple-parent-component` distributes its `name` property\n   * it any light DOM children:\n   *\n   * ```\n   * <dom-module id=\"simple-parent-component\">\n   *   <template>\n   *     <!-- ... -->\n   *   </template>\n   * </dom-module>\n   * <script>\n   *   Polymer({\n   *     is: 'simple-parent-component',\n   *     properties: {\n   *       name: {\n   *         type: String\n   *       }\n   *     },\n   *     distributions: ['name']\n   *   });\n   * </script>\n   * ```\n   *\n   * When this parent component is placed on a page, anything placed in its\n   * light DOM will automatically be set up with a `name` property that\n   * will always inherit its value (and any updates to that value) from\n   * the parent `name` property.\n   *\n   * For example, the light DOM children `simple-child-component` will have\n   * the `name` property distributed to them with the value `Some Name`:\n   *\n   * ```\n   * <simple-parent-component name=\"Some Name\">\n   *   <simple-child-component></simple-child-component>\n   * </simple-parent-component>\n   * <script>\n   *   // The child has inherited the parent's name\n   *   var child = document.querySelector('simple-child-component');\n   *   console.log(child.name); // => 'Some Name'\n   *\n   *   // Updating the name of the parent will also update the child's name\n   *   var parent = document.querySelector('simple-parent-component');\n   *   parent.setAttribute('name', 'New Name');\n   *   console.log(child.name); // => 'New Name'\n   * </script>\n   * ```\n   *\n   * @polymerBehavior PxMapBehaviors.DistributeProperties\n   */\n  const DistributeProperties = {\n    attached() {\n      if (this.distributions && this.distributions.length) {\n        this._addDistributionObservers(this.distributions);\n      }\n    },\n\n    detached() {\n      if (this.distributions && this.distributions.length) {\n        this._removeDistributionObservers();\n      }\n    },\n\n    /**\n     * Creates new observers that watch for new light DOM children to be\n     * distributed and watch for changes to a `property` and apply that\n     * `property` to the children.\n     *\n     * @param {Array} properties - A list of property names to attach to children\n     */\n    _addDistributionObservers(properties) {\n      for (let propertyName of properties) {\n        this._distributeOnNewChildren(propertyName);\n        this._distributeOnPropertyChange(propertyName);\n      }\n    },\n\n    /**\n     * Removes all distribution observers when the host is detached.\n     */\n    _removeDistributionObservers(properties) {\n      // Remove parent -> child light DOM distribution observers\n      const newChildDistributors = this.__newChildDistributors;\n      if (newChildDistributors && newChildDistributors.length) {\n        const distributeFns = newChildDistributors.values();\n        for (let fn of distributeFns) {\n          Polymer.dom(this).unobserveNodes(fn);\n        }\n      }\n\n      // For now, it seems like Polymer.Bind automatically cleans up all the\n      // dynamic property change effects, so we'll end here.\n      // If performance becomes an issue, we may need to look into manually\n      // removing the effects created `Polymer.Bind.addPropertyEffect`.\n    },\n\n    /**\n     * Attaches an observer that is triggered when light DOM child nodes are\n     * distributed or updated. The `propertyName` property and value from the\n     * parent will be applied to the children automatically.\n     *\n     * @param {String} propertyName - The name of the property to distribute to light DOM children\n     */\n    _distributeOnNewChildren(propertyName) {\n      const distributors = this.__newChildDistributors || new Map();\n      if (!distributors.has(propertyName)) {\n        // @TODO: This would be the way to observe without Polymer.dom, but due\n        // to the way Polymer ~1.6 orchestrates DOM manipulation, it doesn't work.\n        // Revert to this code in a newer version:\n        // const boundObserverFn = this[observeFnName].bind(this);\n        // this[observerWrapper] = new MutationObserver(boundObserverFn);\n        // this[observerWrapper].observe(this, {childList:true});\n        let distributeFn = () => this._distributePropertyToChildren(propertyName);\n        let distributorInstance = Polymer.dom(this).observeNodes(distributeFn);\n        distributors.set(propertyName, distributorInstance);\n      }\n    },\n\n    /**\n     * Attaches a `Polymer.Bind` complex property observer that watches for changes\n     * to the value of `propertyName` and syncs the new value to children.\n     *\n     * @param {String} propertyName - The name of the property to watch for changes\n     */\n    _distributeOnPropertyChange(propertyName) {\n      const distributors = this.__propertyChangeDistributors || new Map();\n      if (!distributors.has(propertyName)) {\n        // @TODO: This is Polymer 1.X-flavored code that relies on the internal\n        // `Polymer.Bind.addPropertyEffect` API. In the future, we should use\n        // the hooks Polymer 2.0 will provide into the observer API vs. calling\n        // this internal watcher.\n        let distributeFn = () => this._distributePropertyToChildren(propertyName);\n        Polymer.Bind.addPropertyEffect(this, propertyName, 'function', distributeFn);\n        Polymer.Bind.addPropertyEffect(this, `${propertyName}.*`, 'function', distributeFn);\n        distributors.set(propertyName, true);\n      }\n    },\n\n    /**\n     * Distribute the parent property `propertyName` to all child elements as\n     * with value `propertyValue`. Loops through distributed light DOM children\n     * (found with `getEffectiveChildren`) and update the child's property `propertyName`\n     * if it doesn't already match `propertyValue`.\n     *\n     * @param {String} propertyName - The name of the property to distribute to light DOM children\n     */\n    _distributePropertyToChildren(propertyName) {\n      if (!propertyName || !this[propertyName] || typeof this[propertyName] === 'undefined') return;\n\n      const applyPropertyFn = () => {\n        const children = this.getEffectiveChildren();\n        for (let child of children) {\n          if (!child[propertyName] || child[propertyName] !== this[propertyName]) {\n            child[propertyName] = this[propertyName];\n          }\n        }\n      }\n\n      this.debounce(`apply-property-${propertyName}-reference-to-${this.is}-children`, applyPropertyFn, 1);\n    },\n  };\n\n  const namespace = (window.PxMapBehaviors = window.PxMapBehaviors || {});\n  namespace.DistributeProperties = DistributeProperties;\n})()\n"]}