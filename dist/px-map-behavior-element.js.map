{"version":3,"sources":["px-map-behavior-element.es6.js"],"names":["MapElementBase","beforeRegister","elementInst","shouldAddInst","parent","options","__initialOptions","getInstOptions","createInst","fire","hasLayer","addInst","shouldRemoveInst","removeInst","undefined","shouldUpdateInst","__elAttached","canAddInst","notifyInstReady","lastOptions","__lastOptions","nextOptions","updateInst","Error","extendObj","obj","Object","properties","length","assign","addProperties","extend","namespace","window","PxMapBehavior","MapElement"],"mappings":"aAAA,CAAC,UAAW,CACV,aAMA,GAAMA,gBAAiB,CACrBC,cADqB,0BACJ,CAUf,KAAKC,WAAL,CAAmB,IACpB,CAZoB,CAcrBC,aAdqB,wBAcPC,MAdO,CAcC,CAEpB,GAAI,CAAC,KAAKF,WAAV,CAAuB,CACrB,GAAMG,SAAU,KAAKC,gBAAL,CAAwB,KAAKC,cAAL,EAAxC,CACA,KAAKL,WAAL,CAAmB,KAAKM,UAAL,CAAgBH,OAAhB,CAAnB,CACA,KAAKI,IAAL,CAAU,+BAAV,CACD,CAGD,GAAI,KAAKP,WAAL,EAAoBE,MAApB,EAA8B,CAACA,OAAOM,QAAP,CAAgB,KAAKR,WAArB,CAAnC,CAAsE,CACpE,KAAKS,OAAL,CAAaP,MAAb,CACD,EAGF,CA5BoB,CA8BrBQ,gBA9BqB,2BA8BJR,MA9BI,CA8BI,CACvB,GAAI,KAAKF,WAAT,CAAsB,CACpB,KAAKW,UAAL,CAAgBT,OAASA,MAAT,CAAkBU,SAAlC,CACD,EAGF,CApCoB,CAyCrBC,gBAzCqB,4BAyCF,CACjB,GAAI,CAAC,KAAKb,WAAN,EAAqB,KAAKc,YAA1B,EAA0C,KAAKC,UAAL,EAA9C,CAAiE,CAC/D,KAAKC,eAAL,CAAqB,KAAKD,UAAL,EAArB,CACD,CACD,GAAI,CAAC,KAAKf,WAAV,CAAuB,OAEvB,GAAMiB,aAAc,KAAKC,aAAL,EAAsB,KAAKd,gBAA/C,CACA,GAAMe,aAAc,KAAKd,cAAL,EAApB,CAEA,KAAKe,UAAL,CAAgBH,WAAhB,CAA6BE,WAA7B,EAIA,KAAKD,aAAL,CAAqBC,WACtB,CAvDoB,CA2DrBb,UA3DqB,sBA2DR,CACX,KAAM,IAAIe,MAAJ,CAAU,8CAAV,CACP,CA7DoB,CA+DrBD,UA/DqB,sBA+DR,CACX,KAAM,IAAIC,MAAJ,CAAU,8CAAV,CACP,CAjEoB,CAmErBhB,cAnEqB,0BAmEJ,CACf,KAAM,IAAIgB,MAAJ,CAAU,kDAAV,CACP,CArEoB,CAuErBZ,OAvEqB,mBAuEX,CACR,KAAM,IAAIY,MAAJ,CAAU,4CAAV,CACP,CAzEoB,CA2ErBV,UA3EqB,sBA2ER,CACX,KAAM,IAAIU,MAAJ,CAAU,8CAAV,CACP,CA7EoB,CAiFrBC,SAjFqB,oBAiFXC,GAjFW,CAiFS,CAC5B,GAAI,CAACA,GAAD,EAAQ,EAAEA,cAAeC,OAAjB,CAAZ,CAAsC,KAAM,IAAIH,MAAJ,CAAU,qEAAV,CAAN,CADV,8BAAZI,UAAY,iDAAZA,UAAY,yBAE5B,GAAIA,WAAWC,MAAf,CAAuB,CACrBF,OAAOG,MAAP,eAAcJ,GAAd,SAAsBE,UAAtB,EACD,CACD,MAAOF,IACR,CAvFoB,CAyFrBK,aAzFqB,yBAyFQ,CAC3B,KAAKH,UAAL,CAAkB,KAAKA,UAAL,EAAmB,EAArC,CAD2B,+BAAZA,UAAY,2CAAZA,UAAY,yBAE3B,GAAIA,WAAWC,MAAf,CAAuB,CACrB,KAAKG,MAAL,aAAY,KAAKJ,UAAjB,SAAgCA,UAAhC,EACD,CACD,MAAO,MAAKA,UACb,CA/FoB,CAAvB,CAmGA,GAAMK,WAAaC,OAAOC,aAAP,CAAuBD,OAAOC,aAAP,EAAwB,EAAlE,CAGAF,UAAUhC,cAAV,CAA2BA,cAA3B,CACAgC,UAAUG,UAAV,CAAuB,CAACH,UAAUhC,cAAX,CACxB,CA/GD","file":"px-map-behavior-element.js","sourcesContent":["(function() {\n  'use strict';\n\n  /**\n   *\n   * @polymerBehavior PxMapBehavior.MapElementBase\n   */\n  const MapElementBase = {\n    beforeRegister() {\n      /**\n       * A reference to this element's instance. The instance can be configured and\n       * attached to the map or to another instance. Events emitted by this instance\n       * will be intercepted and retargeted so they appear to come from directly from\n       * this custom element.\n       *\n       * @property elementInst\n       * @type {Object|null}\n       */\n      this.elementInst = null;\n    },\n\n    shouldAddInst(parent) {\n      // Create the instance, if it doesn't already exist\n      if (!this.elementInst) {\n        const options = this.__initialOptions = this.getInstOptions();\n        this.elementInst = this.createInst(options);\n        this.fire('px-map-layer-instance-created');\n      }\n\n      // Add the instance to its parent\n      if (this.elementInst && parent || !parent.hasLayer(this.elementInst)) {\n        this.addInst(parent);\n      };\n\n      // @TODO: Bind events\n    },\n\n    shouldRemoveInst(parent) {\n      if (this.elementInst) {\n        this.removeInst(parent ? parent : undefined);\n      };\n\n      // @TODO: Unbind events\n    },\n\n    // Simple observer trigger for dynamic properties that should be synced\n    // to the instance\n\n    shouldUpdateInst() {\n      if (!this.elementInst && this.__elAttached && this.canAddInst()) {\n        this.notifyInstReady(this.canAddInst());\n      }\n      if (!this.elementInst) return;\n\n      const lastOptions = this.__lastOptions || this.__initialOptions;\n      const nextOptions = this.getInstOptions();\n\n      this.updateInst(lastOptions, nextOptions);\n\n      // Set `lastOptions` to `nextOptions` so the next time this method is called\n      // it will have access to the last options\n      this.__lastOptions = nextOptions;\n    },\n\n    // Should be implemented by behaviors/components that extend...\n\n    createInst() {\n      throw new Error('The `createInst` method must be implemented.')\n    },\n\n    updateInst() {\n      throw new Error('The `updateInst` method must be implemented.')\n    },\n\n    getInstOptions() {\n      throw new Error('The `getInstOptions` method must be implemented.')\n    },\n\n    addInst() {\n      throw new Error('The `bindInst` method must be implemented.')\n    },\n\n    removeInst() {\n      throw new Error('The `unbindInst` method must be implemented.')\n    },\n\n    // Helper methods\n\n    extendObj(obj, ...properties) {\n      if (!obj || !(obj instanceof Object)) throw new Error('The first parameter of `extendObj` must be an object to be mutated.');\n      if (properties.length) {\n        Object.assign(obj, ...properties);\n      }\n      return obj;\n    },\n\n    addProperties(...properties) {\n      this.properties = this.properties || {};\n      if (properties.length) {\n        this.extend(this.properties, ...properties)\n      }\n      return this.properties;\n    }\n  };\n\n  /* Ensures the behavior namespace is created */\n  const namespace = (window.PxMapBehavior = window.PxMapBehavior || {});\n\n  /* Bind MapElement base and chained behaviors */\n  namespace.MapElementBase = MapElementBase;\n  namespace.MapElement = [namespace.MapElementBase];\n})()\n"]}